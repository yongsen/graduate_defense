%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: gradedexample44.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: Yongsen
%%CreationDate: 2013/2/19, 19:34:26
%%BoundingBox: 0 0 360 288
%%HiResBoundingBox: 0 0 360 288
%%CropBox: 0 0 360 288
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 861 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   xmp:ModifyDate="2013-02-19T19:34:19+08:00"
   xmp:CreateDate="2013-02-19T19:34:19+08:00"
   xmp:MetadataDate="2013-02-19T19:34:19+08:00"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:953ab65c-ab55-4e8d-8ef2-4534584df00c"
   xmpMM:InstanceID="uuid:b0f47eb5-fc3a-4659-a941-cde74817ec29"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [360 288 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
360 288 li
360 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 288 mo
360 288 li
360 0 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.15 lw
2 lc
0 lj
3.8 ml
[.2 2 ] 0 dsh
true sadj
27.648 258.75 mo
345.148 258.75 li
.750179 .679652 .670191 .901488 cmyk
@
.25 lw
[] 0 dsh
27.648 258.75 mo
31.352 258.75 li
@
345.148 258.75 mo
341.449 258.75 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans Initial
ct_T42Dict begin
-1.02 -0.414 1.68 1.164
 256 array 0 1 255 {1 index exch /.notdef put} for  /UUGAAA+DejaVuSans
Type42DictBegin
[<00010000000a000a000a000a6376742000691d39000000ac000001fe6670
676d7134766a000002ac000000ab676c79667c2d0d2900000a1800001090
68656164fbcdc8950000035800000036686865610cb8066c000003900000
0024686d747884ee0f45000003b40000006c6c6f63610000e92800000420
000000706d617870048806710000049000000020707265703b07f1000000
04b00000056867646972000000000000000000000000013500b800cb00cb
00c100aa009c01a600b800660000007100cb00a002b20085007500b800c3
01cb0189022d00cb00a600f000d300aa008700cb03aa0400014a003300cb
000000d9050200f4015400b4009c01390114013907060400044e04b40452
04b804e704cd0037047304cd04600473013303a2055605a60556053903c5
021200c9001f00b801df007300ba03e9033303bc0444040e00df03cd03aa
00e503aa0404000000cb008f00a4007b00b80014016f007f027b0252008f
00c705cd009a009a006f00cb00cd019e01d300f000ba018300d500980304
0248009e01d500c100cb00f600830354027f00000333026600d300c700a4
00cd008f009a0073040005d5010a00fe022b00a400b4009c00000062009c
0000001d032d05d505d505d505f0007f007b005400a406b80614072301d3
00b800cb00a601c301ec069300a000d3035c037103db0185042304a80448
008f0139011401390360008f05d5019a0614072306660179046004600460
047b009c00000277046001aa00e904600762007b00c5007f027b000000b4
025205cd006600bc00660077061000cd013b01850389008f007b0000001d
00cd074a042f009c009c0000077d006f0000006f0335006a006f007b00ae
00b2002d0396008f027b00f600830354063705f6008f009c04e10266008f
018d02f600cd03440029006604ee00730000140000960000b70706050403
0201002c2010b002254964b040515820c859212d2cb002254964b0405158
20c859212d2c20100720b00050b00d7920b8ffff5058041b0559b0051cb0
032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051cb003
2508e12d2c4b505820b0fd454459212d2cb002254560442d2c4b5358b002
25b0022545445921212d2c45442d2cb00225b0022549b00525b005254960
b0206368208a108a233a8a10653a2d00000100000002547a22160a1e5f0f
3cf5001f080000000000cba9948d00000000cba9948df7d6fcae0d720955
00000008000000010000000000010000076dfe1d00000de2f7d6fa510d72
00010000000000000000000000000000001b04cd00660517008702e30064
051700810517008b051700a80517008f0517009e051700640517009c0517
0096060400c904e3fffa02b2000006330073025c00c906e700c905960073
05140087058f00c9031f00b005140071057d00c907cb00ba031f00a40475
00c9051700e10000000000000044000000c8000000f4000001c80000029c
0000032800000400000004c00000057c0000066400000760000007bc0000
082c00000878000009200000096800000a6400000afc00000bf400000d08
00000d7800000e1000000ec000000f8400000fdc00001020000010900001
0000001b0354002b0068000c000200100099000800000415021600080004
b8028040fffbfe03fa1403f92503f83203f79603f60e03f5fe03f4fe03f3
2503f20e03f19603f02503ef8a4105effe03ee9603ed9603ecfa03ebfa03
eafe03e93a03e84203e7fe03e63203e5e45305e59603e48a4105e45303e3
e22f05e3fa03e22f03e1fe03e0fe03df3203de1403dd9603dcfe03db1203
da7d03d9bb03d8fe03d68a4105d67d03d5d44705d57d03d44703d3d21b05
d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e05ccfe03cb1e
03ca3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2fe03c1fe03c0
fe03bffe03befe03bdfe03bcfe03bbfe03ba1103b9862505b9fe03b8b7bb
05b8fe03b7b65d05b7bb03b78004b6b52505b65d40ff03b64004b52503b4
fe03b39603b2fe03b1fe03b0fe03affe03ae6403ad0e03acab2505ac6403
abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6fe03a51203a4
fe03a3a20e05a33203a20e03a16403a08a4105a096039ffe039e9d0c059e
fe039d0c039c9b19059c64039b9a10059b19039a1003990a0398fe039796
0d0597fe03960d03958a410595960394930e05942803930e0392fa039190
bb0591fe03908f5d0590bb039080048f8e25058f5d038f40048e25038dfe
038c8b2e058cfe038b2e038a8625058a410389880b05891403880b038786
25058764038685110586250385110384fe038382110583fe0382110381fe
0380fe037ffe0340ff7e7d7d057efe037d7d037c64037b5415057b25037a
fe0379fe03780e03770c03760a0375fe0374fa0373fa0372fa0371fa0370
fe036ffe036efe036c21036bfe036a1142056a530369fe03687d03671142
0566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c035dfe035bfe
035afe0359580a0559fa03580a035716190557320356fe03555415055542
0354150353011005531803521403514a130551fe03500b034ffe034e4d10
054efe034d10034cfe034b4a13054bfe034a4910054a1303491d0d054910
03480d0347fe0346960345960344fe0343022d0543fa0342bb03414b0340
fe033ffe033e3d12053e14033d3c0f053d12033c3b0d053c40ff0f033b0d
033afe0339fe033837140538fa033736100537140336350b05361003350b
03341e03330d0332310b0532fe03310b03302f0b05300d032f0b032e2d09
052e10032d09032c32032b2a25052b64032a2912052a2503291203282725
0528410327250326250b05260f03250b0324fe0323fe03220f0321011005
2112032064031ffa031e1d0d051e64031d0d031c1142051cfe031bfa031a
42031911420519fe031864031716190517fe031601100516190315fe0314
fe0313fe031211420512fe0311022d05114203107d030f64030efe030d0c
16050dfe030c0110050c16030bfe030a100309fe0308022d0508fe030714
030664030401100504fe03401503022d0503fe0302011005022d03011003
00fe0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b1d00>
[4241 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 68 1 <00020087ffe3048f05f0000b00170023401306a01200a00c91128c18091c
0f1e031c151b1810fcecf4ec310010e4f4ec10ee30012202111012333212
111002273200111000232200111000028b9c9d9d9c9d9d9d9dfb0109fef7
fbfbfef701090550fecdfeccfecdfecd0133013301340133a0fe73fe86fe
87fe73018d0179017a018d00>UUGAAA+DejaVuSans AddT42Char 
1 0 0 <00020066fe96046605a400030007001a400c04fb0006fb0108057f020400
2fc4d4ec310010d4ecd4ec301311211125211121660400fc73031bfce5fe
96070ef8f2720629>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g1 1 def
end
UUGAAA+DejaVuSans /Encoding get
dup 1 /g1 put
pop
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans /UUGAAA+DejaVuSans findfont ct_VMDictPut
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 254{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [10.667 0 0 -10.667 0 0 ]msf
15.7344 262.425 mo
(\001)sh
27.648 231.199 mo
29.5 231.199 li
@
345.148 231.199 mo
343.301 231.199 li
@
.15 lw
[.2 2 ] 0 dsh
27.648 195.75 mo
345.148 195.75 li
@
.25 lw
[] 0 dsh
27.648 195.75 mo
31.352 195.75 li
@
345.148 195.75 mo
341.449 195.75 li
@
FBTFEY+DejaVuSans*1 [10.667 0 0 -10.667 0 0 ]msf
15.7344 199.425 mo
(\001)sh
27.648 168.199 mo
29.5 168.199 li
@
345.148 168.199 mo
343.301 168.199 li
@
.15 lw
[.2 2 ] 0 dsh
27.648 132.801 mo
345.148 132.801 li
@
.25 lw
[] 0 dsh
27.648 132.801 mo
31.352 132.801 li
@
345.148 132.801 mo
341.449 132.801 li
@
FBTFEY+DejaVuSans*1 [10.667 0 0 -10.667 0 0 ]msf
15.7344 136.476 mo
(\001)sh
27.648 105.25 mo
29.5 105.25 li
@
345.148 105.25 mo
343.301 105.25 li
@
.15 lw
[.2 2 ] 0 dsh
27.648 69.801 mo
345.148 69.801 li
@
.25 lw
[] 0 dsh
27.648 69.801 mo
31.352 69.801 li
@
345.148 69.801 mo
341.449 69.801 li
@
FBTFEY+DejaVuSans*1 [10.667 0 0 -10.667 0 0 ]msf
15.7344 73.4756 mo
(\001)sh
27.648 42.25 mo
29.5 42.25 li
@
345.148 42.25 mo
343.301 42.25 li
@
27.648 258.75 mo
27.648 255.051 li
@
27.648 10.75 mo
27.648 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 200 2 <0001006401df027f028300030011b6009c020401000410dccc310010d4ec
301321152164021bfde50283a400>UUGAAA+DejaVuSans AddT42Char 
1 244 3 <00020081ffe3048705f00018002400584023071f1901860019a00aa504a0
0089161fa01091168c25071c1c21131e0022221c0d1b2510fcece4f4ecec
310010e4f4ec10e6fef5ee10ee111239304016c419c21ac01bc01cc01dc2
1ec41f07aa12bc12e912035d015d37351e01333212130e01232200353400
332000111000212226013236353426232206151416e14c9c4bc8d30f3ab2
6ce0fefb0110e201030111feb1fee54c9c013e889f9f88889f9f1fb82426
010d0112565c010febe60116fe73fe86fe9ffe5b1e0297baa2a1bbbba1a2
ba00>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g2 2 def
/g3 3 def
end
UUGAAA+DejaVuSans /Encoding get
dup 2 /g2 put
dup 3 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 252{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
16.7422 272.649 mo
(\002\003\001)
[4.79989 8.47981 0 ]xsh
73 258.75 mo
73 255.051 li
@
73 10.75 mo
73 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 456 4 <0003008bffe3048b05f0000b0023002f00434025180c00a02706a01e2da0
12911e8c27a330180c242a1c15241c0f091c151b1e031c0f211b3010fcc4
ecf4c4ec10ee10ee113939310010ece4f4ec10ee10ee3939300122061514
16333236353426252e01353424333216151406071e011514042322243534
36131416333236353426232206028b90a5a59090a6a5fea5829100ffdedf
fe918192a3fef7f7f7fef7a448918382939382839102c59a87879a9b8687
9a5620b280b3d0d0b380b22022c68fd9e8e8d98fc6016174828274748282
0000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g4 4 def
end
UUGAAA+DejaVuSans /Encoding get
dup 4 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 251{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
62.0898 272.649 mo
(\002\004\001)
[4.79989 8.47982 0 ]xsh
118.352 258.75 mo
118.352 255.051 li
@
118.352 10.75 mo
118.352 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 668 5 <000100a80000046805d5000600634018051102030203110405044205a000
8103050301040100060710fcccc411393931002ff4ec304b5358071005ed
071005ed5922014bb0165458bd00070040000100070007ffc03811373859
401258020106031a05390548056703b000b006075d005d13211501230121
a803c0fde2d301fefd3305d556fa81052b000000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g5 5 def
end
UUGAAA+DejaVuSans /Encoding get
dup 5 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 250{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
107.441 272.649 mo
(\002\005\001)
[4.79989 8.47982 0 ]xsh
163.699 258.75 mo
163.699 255.051 li
@
163.699 10.75 mo
163.699 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 808 6 <0002008fffe3049605f0000b0024005840241306000d860c00a01606a01c
16a510a00c8922911c8c250c22091c191e131c03211f1b2510fcececf4ec
e4310010e4f4e4fce410ee10ee10ee111239304014cb00cb01cd02cd03cd
04cb05cb0607a41eb21e025d015d01220615141633323635342601152e01
232202033e0133320015140023200011100021321602a4889f9f88889f9f
01094c9b4cc8d30f3bb26be10105fef0e2fefdfeee0150011b4c9b033bba
a2a1bbbba1a2ba0279b82426fef2feef575dfeefebe6feea018d01790162
01a51e000000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g6 6 def
end
UUGAAA+DejaVuSans /Encoding get
dup 6 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 249{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
152.789 272.649 mo
(\002\006\001)
[4.7999 8.47981 0 ]xsh
209.102 258.75 mo
209.102 255.051 li
@
209.102 10.75 mo
209.102 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 1024 7 <0001009effe3046405d5001d005e4023041a071186101d1aa00714a01089
0d02a000810d8c07a41e171c010a031c000a10061e10fc014bb016544bb0
14545b58b90010ffc038594bb00f5458b9001000403859c4d4ec10c4ee31
0010e4e4f4ec10e6ee10fec410ee1112393013211521113e013332001514
0021222627351e0133323635342623220607dd0319fda02c582cfa0124fe
d4feef5ec3685ac06badcacaad51a15405d5aafe920f0ffeeeeaf1fef520
20cb3130b69c9cb624260000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g7 7 def
end
UUGAAA+DejaVuSans /Encoding get
dup 7 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
248{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
198.191 272.649 mo
(\002\007\001)
[4.7999 8.47981 0 ]xsh
254.449 258.75 mo
254.449 255.051 li
@
254.449 10.75 mo
254.449 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 1216 8 <00020064000004a405d50002000d0081401d010d030d0003030d4200030b
07a00501038109010c0a001c0608040c0e10dc4bb00b544bb00d545b58b9
000cffc03859d43cc4ec32113931002fe4d43cec321239304b5358071004
c9071005c9592201402a0b002a0048005900690077008a000716012b0026
012b0336014e014f0c4f0d5601660175017a0385010d5d005d0901210333
1133152311231121350306fe0201fe35fed5d5c9fd5e0525fce303cdfc33
a8fea00160c30000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g8 8 def
end
UUGAAA+DejaVuSans /Encoding get
dup 8 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 247{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
243.539 272.649 mo
(\002\010\001)
[4.7999 8.4798 0 ]xsh
299.801 258.75 mo
299.801 255.051 li
@
299.801 10.75 mo
299.801 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 1404 9 <0001009cffe3047305f000280070402e0015130a86091f862013a0150da0
0993061ca020932391068c15a329161c13000314191c2620101c03141f09
062910fc4bb016544bb014545b58b90009ffc03859c4c4d4ecf4ec111739
39310010ece4f4e4ec10e6ee10ee10ee10ee11123930014009641e611f61
20642104005d011e0115140421222627351e013332363534262b01353332
3635342623220607353e01333204151406033f91a3fed0fee85ec76a54c8
6dbec7b9a5aeb6959ea39853be7273c959e6010c8e03251fc490ddf22525
c33132968f8495a67770737b2426b42020d1b27cab00>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g9 9 def
end
UUGAAA+DejaVuSans /Encoding get
dup 9 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 246{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
288.891 272.649 mo
(\002\011\001)
[4.7999 8.4798 0 ]xsh
345.148 258.75 mo
345.148 255.051 li
@
345.148 10.75 mo
345.148 14.449 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 1636 10 <000100960000044a05f0001c009a4027191a1b03181c1105040011050504
4210a111940da014910400a00200100a02010a1c171003061d10fc4bb015
544bb016545b4bb014545b58b90003ffc03859c4d4ecc0c011123931002f
ec32f4ecf4ec304b5358071005ed0705ed11173959220140325504560556
077a047a05761b87190704000419041a041b051c74007606751a731b741c
82008619821a821b821ca800a81b115d005d25211521353600373e013534
2623220607353e01333204151406070600018902c1fc4c73018d33614da7
865fd3787ad458e80114455b19fef4aaaaaa7701913a6d974977964243cc
3132e8c25ca5701dfeeb0000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g10 10 def
end
UUGAAA+DejaVuSans /Encoding get
dup 10 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 245{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
334.242 272.649 mo
(\002\012\001)
[4.7999 8.4798 0 ]xsh
27.648 10.75 mo
27.648 258.75 li
345.148 258.75 li
345.148 10.75 li
27.648 10.75 li
@
%ADOBeginSubsetFont: UUGAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UUGAAA+DejaVuSans gcheck setglobal} if
1 1888 11 <000100c90000053b05d5000b002c4014089502ad0400810a0607031c0538
09011c00040c10fcec32fcec3231002f3ce432fcec30b2500d01015d1333
11211133112311211123c9ca02decacafd22ca05d5fd9c0264fa2b02c7fd
3900>UUGAAA+DejaVuSans AddT42Char 
1 1980 12 <0001fffa000004e905d50007004a400e0602950081040140031c00400508
10d4e4fce431002ff4ec3230014bb00a5458bd00080040000100080008ff
c03811373859401300091f00100110021f071009400970099f09095d0321
1521112311210604effdeecbfdee05d5aafad5052b00>UUGAAA+DejaVuSans AddT42Char 
1 2092 13 <00010000ff4202b205d50003002d4014001a010201021a03000342029f00
8104020001032fc43939310010f4ec304b5358071005ed071005ed592201
3301230208aafdf8aa05d5f96d000000>UUGAAA+DejaVuSans AddT42Char 
1 2168 14 <00010073ffe3058b05f0001d0039402000051b0195031b950812a111ae15
950e91088c1e02001c1134043318190b101e10fcecfce4fcc4310010e4f4
ecf4ec10fed4ee1139393025112135211106042320001110002132041715
2e0123200011100021323604c3feb6021275fee6a0fea2fe75018b015e92
01076f70fc8bfeeefeed011301126ba8d50191a6fd7f53550199016d016e
01994846d75f60fecefed1fed2fece250000>UUGAAA+DejaVuSans AddT42Char 
1 2336 15 <000100c90000019305d50003002eb700af02011c00040410fc4bb0105458
b9000000403859ec31002fec3001400d30054005500560058f059f05065d
13331123c9caca05d5fa2b00>UUGAAA+DejaVuSans AddT42Char 
1 2408 16 <000100c90000061f05d5000c00bf40340311070807021101020808070211
0302090a0901110a0a09420a070203080300af080b050908030201050a06
1c043e0a1c00040d10fcecfcec11173931002f3cc4ec32111739304b5358
071005ed071008ed071008ed071005ed5922b2700e01015d405603070f08
0f09020a15021407130a260226072007260a200a3407350a69027c027b07
790a80028207820a90021604010b0313011b0323012c032708280934013c
035608590965086a097608790981018d0395019b03145d005d1321090121
1123110123011123c9012d017d017f012dc5fe7fcbfe7fc405d5fc0803f8
fa2b051ffc000400fae10000>UUGAAA+DejaVuSans AddT42Char 
1 2660 17 <00010073ffe3052705f000190036401a0da10eae0a951101a100ae049517
91118c1a07190d003014101a10fcec32ec310010e4f4ecf4ec10eef6ee30
b40f1b1f1b02015d01152e0123200011100021323637150e012320001110
00213216052766e782ff00fef00110010082e7666aed84feadfe7a018601
5386ed0562d55f5efec7fed8fed9fec75e5fd34848019f01670168019f47
0000>UUGAAA+DejaVuSans AddT42Char 
1 2812 18 <00010087ffe304a205f00027007e403c0d0c020e0b021e1f1e080902070a
021f1f1e420a0b1e1f0415010015a11494189511049500942591118c281e
0a0b1f1b0700221b190e2d071914222810dcc4ecfcece411123939393931
0010e4f4e4ec10eef6ee10c6111739304b535807100eed11173907100eed
1117395922b20f2901015db61f292f294f29035d01152e01232206151416
1f011e0115140421222627351e013332363534262f012e01353424333216
044873cc5fa5b377a67ae2d7feddfee76aef807bec72adbc879a7be2ca01
17f569da05a4c53736807663651f192bd9b6d9e0302fd04546887e6e7c1f
182dc0abc6e42600>UUGAAA+DejaVuSans AddT42Char 
1 3060 19 <000200c90000055405d50013001c00b14035090807030a06110304030511
0404034206040015030415950914950d810b040506031109001c160e050a
191904113f140a1c0c041d10fcec32fcc4ec1117391139393931002f3cf4
ecd4ec123912391239304b5358071005ed071005ed1117395922b2401e01
015d40427a13010500050105020603070415001501140216031704250025
01250226032706260726082609201e360136024601460268057504750577
1388068807980698071f5d005d011e01171323032e012b01112311212016
151406011133323635342623038d417b3ecdd9bf4a8b78dcca01c80100fc
83fd89fe9295959202bc16907efe68017f9662fd8905d5d6d88dba024ffd
ee8783838500>UUGAAA+DejaVuSans AddT42Char 
1 3336 20 <000100b0fef2027b0612000d0037400f069800970e0d070003120600130a
0e10dc4bb0135458b9000affc038594bb00f5458b9000a00403859e432ec
113939310010fcec300106021514121723260235341237027b86828385a0
969594970612e6fe3ee7e7fe3be5eb01c6e0df01c4ec>UUGAAA+DejaVuSans AddT42Char 
1 3448 21 <00020071ffe3045a06140010001c003840191ab9000e14b905088c0eb801
970317040008024711120b451d10fcecf4ec323231002fece4f4c4ec10c4
ee30b6601e801ea01e03015d0111331123350e0123220211100033321601
141633323635342623220603a2b8b83ab17ccbff00ffcb7cb1fdc7a79292
a8a89292a703b6025ef9eca86461014401080108014461fe15cbe7e7cbcb
e7e7>UUGAAA+DejaVuSans AddT42Char 
1 3600 22 <000300c9000004ec05d5000800110020004340231900950a099512810195
0aad1f110b080213191f05000e1c1605191c2e09001c12042110fcec32fc
ecd4ec111739393931002fececf4ec10ee3930b20f2201015d0111213236
3534262301112132363534262325213216151406071e0115140423210193
0144a39d9da3febc012b94919194fe0b0204e7fa807c95a5fef0fbfde802
c9fddd878b8c850266fe3e6f727170a6c0b189a21420cb98c8da>UUGAAA+DejaVuSans AddT42Char 
1 3776 23 <000100ba0000071d047b0022005a4026061209180f00061d07150c871d20
03b81bbc19100700110f0808065011080f501c18081a462310fcec32fcfc
fcec11123931002f3c3ce4f43cc4ec321112173930401330245024702490
24a024a024bf24df24ff2409015d013e0133321615112311342623220615
11231134262322061511231133153e01333216042945c082afbeb972758f
a6b972778da6b9b93fb0797aab03897c76f5e2fd5c029ea19cbea4fd8702
9ea29bbfa3fd870460ae67627c000000>UUGAAA+DejaVuSans AddT42Char 
1 3972 24 <000100a4fef2026f0612000d001f400f079800970e0701000b1204130800
0e10dc3cf4ec113939310010fcec301333161215140207233612353402a4
a096959596a08583830612ecfe3cdfe0fe3aebe501c5e7e701c20000>UUGAAA+DejaVuSans AddT42Char 
1 4060 25 <000100c90000046a05d500050025400c0295008104011c033a00040610fc
ecec31002fe4ec304009300750078003800404015d133311211521c9ca02
d7fc5f05d5fad5aa>UUGAAA+DejaVuSans AddT42Char 
1 4128 26 <000100e10000045a05d5000a004040154203a00402a005810700a009081f
061c03001f010b10d44bb00f5458b9000100403859ecc4fcec31002fec32
f4ecd4ec304b5358592201b40f030f04025d3721110535253311211521fe
014afe990165ca014afca4aa047348b848fad5aa0000>UUGAAA+DejaVuSans AddT42Char 
UUGAAA+DejaVuSans /CharStrings get begin
/g11 11 def
/g12 12 def
/g13 13 def
/g14 14 def
/g15 15 def
/g16 16 def
/g17 17 def
/g18 18 def
/g19 19 def
/g20 20 def
/g21 21 def
/g22 22 def
/g23 23 def
/g24 24 def
/g25 25 def
/g26 26 def
end
UUGAAA+DejaVuSans /Encoding get
dup 11 /g11 put
dup 12 /g12 put
dup 13 /g13 put
dup 14 /g14 put
dup 15 /g15 put
dup 16 /g16 put
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
dup 22 /g22 put
dup 23 /g23 put
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FBTFEY+DejaVuSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 229{/.notdef}rp]
FBTFEY+DejaVuSans nf
FBTFEY+DejaVuSans*1 [-2.939e-15 -16 -16 2.939e-15 0 0 ]msf
13.2266 177.145 mo
(\013\014\015\016\017\015\020\021\022)
[-12.0161 -9.76001 -5.37598 -12.384 -4.7041 -5.37598 -13.792 -11.168 0 ]ysh
FBTFEY+DejaVuSans*1 [16 0 0 -16 0 0 ]msf
146.059 287.527 mo
(\023\022\022\024\025\026\027\030)
[11.104 10.144 10.144 6.23999 10.144 10.9761 15.584 0 ]xsh
FBTFEY+DejaVuSans*1 [13.333 0 0 -13.333 0 0 ]msf
186.375 247.603 mo
(\013\014\012\001\015\031\016\017)
[10.0132 8.13315 8.46638 8.47981 4.47987 7.42657 10.3064 0 ]xsh
209.074 192.501 mo
(\013\014\012\001\015\022\016\017)
[10.0132 8.13315 8.46638 8.47981 4.47987 8.45317 10.3063 0 ]xsh
231.727 129.501 mo
(\013\014\010\001\015\031\016\017)
[10.0132 8.13315 8.46637 8.47983 4.47986 7.42657 10.3064 0 ]xsh
254.426 66.501 mo
(\013\014\010\001\015\022\016\017)
[10.0132 8.13315 8.46637 8.47983 4.47986 8.45319 10.3063 0 ]xsh
FBTFEY+DejaVuSans*1 [10.667 0 0 -10.667 0 0 ]msf
27.625 207.327 mo
(\032\007)
[6.78423 0 ]xsh
27.625 144.327 mo
(\032\007)
[6.78423 0 ]xsh
27.625 81.3271 mo
(\032\007)
[6.78423 0 ]xsh
27.625 22.2764 mo
(\032\007)
[6.78423 0 ]xsh
27.648 258.75 mo
27.648 257.898 li
31.297 257.898 li
31.297 258.75 li
cp
.512779 .430121 .430121 .0756542 cmyk
f
27.648 258.75 mo
27.648 257.949 li
31.301 257.949 li
31.301 258.75 li
27.648 258.75 li
@
28.102 255.602 mo
28.102 254 li
36.25 254 li
36.25 255.602 li
cp
f
28.102 255.602 mo
28.102 254.051 li
36.25 254.051 li
36.25 255.602 li
28.102 255.602 li
@
32.648 251.648 mo
32.648 250.047 li
40.797 250.047 li
40.797 251.648 li
cp
f
32.648 251.648 mo
32.648 250.102 li
40.801 250.102 li
40.801 251.648 li
32.648 251.648 li
@
41.25 247.75 mo
41.25 246.102 li
50.352 246.102 li
50.352 247.75 li
cp
f
41.25 247.75 mo
41.25 246.148 li
50.352 246.148 li
50.352 247.75 li
41.25 247.75 li
@
49.398 243.801 mo
49.398 242.152 li
60.297 242.152 li
60.297 243.801 li
cp
f
49.398 243.801 mo
49.398 242.199 li
60.301 242.199 li
60.301 243.801 li
49.398 243.801 li
@
53.949 239.852 mo
53.949 238.25 li
64.848 238.25 li
64.848 239.852 li
cp
f
53.949 239.852 mo
53.949 238.301 li
64.852 238.301 li
64.852 239.852 li
53.949 239.852 li
@
56.699 235.898 mo
56.699 234.297 li
71.199 234.297 li
71.199 235.898 li
cp
f
56.699 235.898 mo
56.699 234.352 li
71.199 234.352 li
71.199 235.898 li
56.699 235.898 li
@
60.301 232 mo
60.301 230.352 li
76.652 230.352 li
76.652 232 li
cp
f
60.301 232 mo
60.301 230.398 li
76.648 230.398 li
76.648 232 li
60.301 232 li
@
62.102 228.051 mo
62.102 226.402 li
83.902 226.402 li
83.902 228.051 li
cp
f
62.102 228.051 mo
62.102 226.449 li
83.898 226.449 li
83.898 228.051 li
62.102 228.051 li
@
68.449 224.102 mo
68.449 222.5 li
95.699 222.5 li
95.699 224.102 li
cp
f
68.449 224.102 mo
68.449 222.551 li
95.699 222.551 li
95.699 224.102 li
68.449 224.102 li
@
82.102 220.148 mo
82.102 218.547 li
118.352 218.547 li
118.352 220.148 li
cp
f
82.102 220.148 mo
82.102 218.602 li
118.352 218.602 li
118.352 220.148 li
82.102 220.148 li
@
86.602 216.25 mo
86.602 214.602 li
131.953 214.602 li
131.953 216.25 li
cp
f
86.602 216.25 mo
86.602 214.648 li
131.949 214.648 li
131.949 216.25 li
86.602 216.25 li
@
118.352 212.301 mo
118.352 210.652 li
172.801 210.652 li
172.801 212.301 li
cp
f
118.352 212.301 mo
118.352 210.699 li
172.801 210.699 li
172.801 212.301 li
118.352 212.301 li
@
131.949 208.352 mo
131.949 206.75 li
186.398 206.75 li
186.398 208.352 li
cp
f
131.949 208.352 mo
131.949 206.801 li
186.398 206.801 li
186.398 208.352 li
131.949 208.352 li
@
159.199 204.449 mo
159.199 202.801 li
231.75 202.801 li
231.75 204.449 li
cp
f
159.199 204.449 mo
159.199 202.852 li
231.75 202.852 li
231.75 204.449 li
159.199 204.449 li
@
177.352 200.5 mo
177.352 198.852 li
286.203 198.852 li
286.203 200.5 li
cp
f
177.352 200.5 mo
177.352 198.898 li
286.199 198.898 li
286.199 200.5 li
177.352 200.5 li
@
27.648 196.551 mo
27.648 194.949 li
31.297 194.949 li
31.297 196.551 li
cp
f
27.648 196.551 mo
27.648 195 li
31.301 195 li
31.301 196.551 li
27.648 196.551 li
@
28.102 192.602 mo
28.102 191 li
36.25 191 li
36.25 192.602 li
cp
f
28.102 192.602 mo
28.102 191.051 li
36.25 191.051 li
36.25 192.602 li
28.102 192.602 li
@
32.648 188.699 mo
32.648 187.051 li
40.797 187.051 li
40.797 188.699 li
cp
f
32.648 188.699 mo
32.648 187.102 li
40.801 187.102 li
40.801 188.699 li
32.648 188.699 li
@
41.25 184.75 mo
41.25 183.102 li
50.352 183.102 li
50.352 184.75 li
cp
f
41.25 184.75 mo
41.25 183.148 li
50.352 183.148 li
50.352 184.75 li
41.25 184.75 li
@
49.398 180.801 mo
49.398 179.199 li
60.297 179.199 li
60.297 180.801 li
cp
f
49.398 180.801 mo
49.398 179.25 li
60.301 179.25 li
60.301 180.801 li
49.398 180.801 li
@
53.949 176.852 mo
53.949 175.25 li
64.848 175.25 li
64.848 176.852 li
cp
f
53.949 176.852 mo
53.949 175.301 li
64.852 175.301 li
64.852 176.852 li
53.949 176.852 li
@
56.699 172.949 mo
56.699 171.301 li
71.199 171.301 li
71.199 172.949 li
cp
f
56.699 172.949 mo
56.699 171.352 li
71.199 171.352 li
71.199 172.949 li
56.699 172.949 li
@
70.301 169 mo
70.301 167.352 li
84.801 167.352 li
84.801 169 li
cp
f
70.301 169 mo
70.301 167.398 li
84.801 167.398 li
84.801 169 li
70.301 169 li
@
77.551 165.051 mo
77.551 163.449 li
95.699 163.449 li
95.699 165.051 li
cp
f
77.551 165.051 mo
77.551 163.5 li
95.699 163.5 li
95.699 165.051 li
77.551 165.051 li
@
92.949 161.102 mo
92.949 159.5 li
116.551 159.5 li
116.551 161.102 li
cp
f
92.949 161.102 mo
92.949 159.551 li
116.551 159.551 li
116.551 161.102 li
92.949 161.102 li
@
100.199 157.199 mo
100.199 155.551 li
136.5 155.551 li
136.5 157.199 li
cp
f
100.199 157.199 mo
100.199 155.602 li
136.5 155.602 li
136.5 157.199 li
100.199 157.199 li
@
113.852 153.25 mo
113.852 151.648 li
159.203 151.648 li
159.203 153.25 li
cp
f
113.852 153.25 mo
113.852 151.699 li
159.199 151.699 li
159.199 153.25 li
113.852 153.25 li
@
133.801 149.301 mo
133.801 147.699 li
166.449 147.699 li
166.449 149.301 li
cp
f
133.801 149.301 mo
133.801 147.75 li
166.449 147.75 li
166.449 149.301 li
133.801 149.301 li
@
151.949 145.398 mo
151.949 143.75 li
184.598 143.75 li
184.598 145.398 li
cp
f
151.949 145.398 mo
151.949 143.801 li
184.602 143.801 li
184.602 145.398 li
151.949 145.398 li
@
150.102 141.449 mo
150.102 139.801 li
195.453 139.801 li
195.453 141.449 li
cp
f
150.102 141.449 mo
150.102 139.852 li
195.449 139.852 li
195.449 141.449 li
150.102 141.449 li
@
172.801 137.5 mo
172.801 135.898 li
245.352 135.898 li
245.352 137.5 li
cp
f
172.801 137.5 mo
172.801 135.949 li
245.352 135.949 li
245.352 137.5 li
172.801 137.5 li
@
27.648 133.551 mo
27.648 131.949 li
31.297 131.949 li
31.297 133.551 li
cp
f
27.648 133.551 mo
27.648 132 li
31.301 132 li
31.301 133.551 li
27.648 133.551 li
@
28.102 129.648 mo
28.102 128 li
36.25 128 li
36.25 129.648 li
cp
f
28.102 129.648 mo
28.102 128.051 li
36.25 128.051 li
36.25 129.648 li
28.102 129.648 li
@
32.648 125.699 mo
32.648 124.051 li
40.797 124.051 li
40.797 125.699 li
cp
f
32.648 125.699 mo
32.648 124.102 li
40.801 124.102 li
40.801 125.699 li
32.648 125.699 li
@
41.25 121.75 mo
41.25 120.148 li
50.352 120.148 li
50.352 121.75 li
cp
f
41.25 121.75 mo
41.25 120.199 li
50.352 120.199 li
50.352 121.75 li
41.25 121.75 li
@
49.398 117.801 mo
49.398 116.199 li
60.297 116.199 li
60.297 117.801 li
cp
f
49.398 117.801 mo
49.398 116.25 li
60.301 116.25 li
60.301 117.801 li
49.398 117.801 li
@
53.949 113.898 mo
53.949 112.25 li
64.848 112.25 li
64.848 113.898 li
cp
f
53.949 113.898 mo
53.949 112.301 li
64.852 112.301 li
64.852 113.898 li
53.949 113.898 li
@
56.699 109.949 mo
56.699 108.348 li
71.199 108.348 li
71.199 109.949 li
cp
f
56.699 109.949 mo
56.699 108.398 li
71.199 108.398 li
71.199 109.949 li
56.699 109.949 li
@
60.301 106 mo
60.301 104.398 li
76.652 104.398 li
76.652 106 li
cp
f
60.301 106 mo
60.301 104.449 li
76.648 104.449 li
76.648 106 li
60.301 106 li
@
62.102 102.102 mo
62.102 100.453 li
83.902 100.453 li
83.902 102.102 li
cp
f
62.102 102.102 mo
62.102 100.5 li
83.898 100.5 li
83.898 102.102 li
62.102 102.102 li
@
68.449 98.148 mo
68.449 96.5 li
95.699 96.5 li
95.699 98.148 li
cp
f
68.449 98.148 mo
68.449 96.551 li
95.699 96.551 li
95.699 98.148 li
68.449 98.148 li
@
82.102 94.199 mo
82.102 92.598 li
118.352 92.598 li
118.352 94.199 li
cp
f
82.102 94.199 mo
82.102 92.648 li
118.352 92.648 li
118.352 94.199 li
82.102 94.199 li
@
95.699 90.25 mo
95.699 88.648 li
141.051 88.648 li
141.051 90.25 li
cp
f
95.699 90.25 mo
95.699 88.699 li
141.051 88.699 li
141.051 90.25 li
95.699 90.25 li
@
118.352 86.352 mo
118.352 84.703 li
172.801 84.703 li
172.801 86.352 li
cp
f
118.352 86.352 mo
118.352 84.75 li
172.801 84.75 li
172.801 86.352 li
118.352 86.352 li
@
145.602 82.398 mo
145.602 80.75 li
218.152 80.75 li
218.152 82.398 li
cp
f
145.602 82.398 mo
145.602 80.801 li
218.148 80.801 li
218.148 82.398 li
145.602 82.398 li
@
186.398 78.449 mo
186.398 76.848 li
322.449 76.848 li
322.449 78.449 li
cp
f
186.398 78.449 mo
186.398 76.898 li
322.449 76.898 li
322.449 78.449 li
186.398 78.449 li
@
209.102 74.5 mo
209.102 72.898 li
345.152 72.898 li
345.152 74.5 li
cp
f
209.102 74.5 mo
209.102 72.949 li
345.148 72.949 li
345.148 74.5 li
209.102 74.5 li
@
28.102 70.602 mo
28.102 68.953 li
36.25 68.953 li
36.25 70.602 li
cp
f
28.102 70.602 mo
28.102 69 li
36.25 69 li
36.25 70.602 li
28.102 70.602 li
@
32.199 66.648 mo
32.199 65 li
41.25 65 li
41.25 66.648 li
cp
f
32.199 66.648 mo
32.199 65.051 li
41.25 65.051 li
41.25 66.648 li
32.199 66.648 li
@
36.699 62.699 mo
36.699 61.098 li
45.801 61.098 li
45.801 62.699 li
cp
f
36.699 62.699 mo
36.699 61.148 li
45.801 61.148 li
45.801 62.699 li
36.699 62.699 li
@
44.898 58.801 mo
44.898 57.152 li
55.75 57.152 li
55.75 58.801 li
cp
f
44.898 58.801 mo
44.898 57.199 li
55.75 57.199 li
55.75 58.801 li
44.898 58.801 li
@
53.5 54.852 mo
53.5 53.203 li
65.301 53.203 li
65.301 54.852 li
cp
f
53.5 54.852 mo
53.5 53.25 li
65.301 53.25 li
65.301 54.852 li
53.5 54.852 li
@
57.602 50.898 mo
57.602 49.297 li
70.301 49.297 li
70.301 50.898 li
cp
f
57.602 50.898 mo
57.602 49.352 li
70.301 49.352 li
70.301 50.898 li
57.602 50.898 li
@
60.301 46.949 mo
60.301 45.348 li
76.652 45.348 li
76.652 46.949 li
cp
f
60.301 46.949 mo
60.301 45.398 li
76.648 45.398 li
76.648 46.949 li
60.301 46.949 li
@
68.449 43.051 mo
68.449 41.402 li
86.598 41.402 li
86.598 43.051 li
cp
f
68.449 43.051 mo
68.449 41.449 li
86.602 41.449 li
86.602 43.051 li
68.449 43.051 li
@
80.25 39.102 mo
80.25 37.453 li
102.051 37.453 li
102.051 39.102 li
cp
f
80.25 39.102 mo
80.25 37.5 li
102.051 37.5 li
102.051 39.102 li
80.25 39.102 li
@
95.699 35.148 mo
95.699 33.547 li
122.898 33.547 li
122.898 35.148 li
cp
f
95.699 35.148 mo
95.699 33.602 li
122.898 33.602 li
122.898 35.148 li
95.699 35.148 li
@
109.301 31.199 mo
109.301 29.598 li
145.602 29.598 li
145.602 31.199 li
cp
f
109.301 31.199 mo
109.301 29.648 li
145.602 29.648 li
145.602 31.199 li
109.301 31.199 li
@
122.898 27.301 mo
122.898 25.652 li
168.25 25.652 li
168.25 27.301 li
cp
f
122.898 27.301 mo
122.898 25.699 li
168.25 25.699 li
168.25 27.301 li
122.898 27.301 li
@
136.5 23.352 mo
136.5 21.703 li
190.949 21.703 li
190.949 23.352 li
cp
f
136.5 23.352 mo
136.5 21.75 li
190.949 21.75 li
190.949 23.352 li
136.5 23.352 li
@
154.648 19.398 mo
154.648 17.797 li
209.098 17.797 li
209.098 19.398 li
cp
f
154.648 19.398 mo
154.648 17.852 li
209.102 17.852 li
209.102 19.398 li
154.648 19.398 li
@
172.801 15.449 mo
172.801 13.848 li
245.352 13.848 li
245.352 15.449 li
cp
f
172.801 15.449 mo
172.801 13.898 li
245.352 13.898 li
245.352 15.449 li
172.801 15.449 li
@
209.102 11.551 mo
209.102 10.699 li
345.152 10.699 li
345.152 11.551 li
cp
f
209.102 11.551 mo
209.102 10.75 li
345.148 10.75 li
345.148 11.551 li
209.102 11.551 li
@
164.199 89.5 mo
164.199 90.168 163.199 90.168 163.199 89.5 cv
163.199 88.832 164.199 88.832 164.199 89.5 cv
.913725 .734798 0 0 cmyk
f
160.699 89.5 mo
163.699 92.5 li
166.699 89.5 li
163.699 86.5 li
cp
f
160.699 89.5 mo
163.699 92.5 li
166.699 89.5 li
163.699 86.5 li
cp
@
164.199 211.5 mo
164.199 212.168 163.199 212.168 163.199 211.5 cv
163.199 210.832 164.199 210.832 164.199 211.5 cv
.750179 .679652 .670191 .901488 cmyk
f
160.699 211.5 mo
163.699 214.5 li
166.699 211.5 li
163.699 208.5 li
cp
f
160.699 211.5 mo
163.699 214.5 li
166.699 211.5 li
163.699 208.5 li
cp
@
27.648 10.75 mo
27.648 258.75 li
345.148 258.75 li
345.148 10.75 li
27.648 10.75 li
@
1.2 lw
[.2 2 ] 0 dsh
163.699 10.75 mo
163.699 258.75 li
@
27.648 89.5 mo
163.699 89.5 li
@
gsave
167.709 103.873 mo
308.535 103.873 li
308.535 87.8634 li
167.709 87.8634 li
cp
clp
168.209 103.373 mo
308.035 103.373 li
308.035 88.3635 li
168.209 88.3635 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
10 ml
[] 0 dsh
168.209 103.373 mo
308.035 103.373 li
308.035 88.3635 li
168.209 88.3635 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
169.709 101.873 mo
306.535 101.873 li
306.535 89.8635 li
169.709 89.8635 li
cp
clp
0 1 1 .00030518 cmyk
%ADOBeginSubsetFont: XNJBAA+Arial-BoldItalicMT Initial
ct_T42Dict begin
-0.559 -0.375 1.387 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /XNJBAA+Arial-BoldItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f1137f17000000cc000000606376
74205dd36beb0000012c000006b66670676dd568c71c000007e400000662
676c79669e0c09be00007b5c0000016a68656164dcfe849500000e480000
0036686865610e300ef400000e8000000024686d7478c808c70900000ea4
00002e246c6f6361000e4cce00003cc800002e286d617870117603f00000
6af0000000206e616d652efdd7b400006b10000003cf707265702692b618
00006ee000000c7c67646972000000000000000000000000000303d402bc
00050008059a0533001e011b059a0533005a03d1006602120805020b0704
020202090204e0000aff000078430000000100000000544d432000210020
fffc05d3fe510133073e01b2400001bfdff70000042605b9000000200004
05ba001b05ba001b05a6001b0426001b0000ffe50000ffe50000ffe5fe6b
ffe505ba001bfe6cffe502e70000011c0000011c0000000000000000007a
00d60127011800f5011200af011d00ca00b400d8012a007c00cd01640016
001700fc02240020010500060018005400aa00ca0107005900b3ffe900a8
005700ec0401009100e0012c005600cc010e00030055009d004e0115ffab
00eb0102ffe00017003a005000900114057605d80182000501030285ff2f
000d040100830014003e009c00d3017c09b5ffd5003700bd044cfff10098
0118022a000e007000e600f00127012d0238025dff6d0061007f00c10106
03430593ff2c006e00fc0386ffa3ffe9000700530055005f007e009700eb
013e01c002af0564001c003f0048004a005d006d00a600ad026605f00001
00020026006c00a800c700e801ad01db03e803f90408045e048c0525fe3f
000e0022003300380057005f00620073008c009800be0100011f01520199
0532fd810016002000260031003800800082008900b30100010e01110115
0156019d027e02cf02ee04a905d8ffcf002600340076007e008300c100c5
00eb00f20106012e0130018201b901d10201027902fa0320ff00ffbc0028
00470052005c007700810090009900b200bc00cc01c1024d0343037703b0
04eb04fbfec4000c005a0062007b00b300c900d500d60112011c022602ec
0321038503a303cc03f503f90413048304fbfee0002200300031004c004c
0053005d0073007a0087008e00a100ab00b600ba00c100d000d100db00e5
01150138016b017c019e01bb01f601fa02210222023c026f029502b002ba
02e203160351035403710396039a03c603d304110442044b049d04b604da
062d06e80761fea5fee3ff4eff58ff81ff92ffbbffc2ffd3ffee0009000d
00220023002c0069006c00710077007f008c00ae00be00be00c800d700d9
00da00dc00e500f50100010c011b0135014a01530155016c0172018e018f
0194019801c501ce020a02110215024f02500267028602c802cf0339033b
03b8042804320445045a046b0474048605320532054d058c05a805aa05ab
05f005fc061206aa080008ccfd2afddefe68fe76feddff0aff0eff1eff30
ff69fff50005001e0038006100670087009b00a100a400a600ac00c000c4
00cc00d100d400d900dc00dd00de00df00e500f300fc0114011601180118
011b012c013e014e016a0178018101820198019b01a301b601b801bc01c3
01cd01d001d101d201d801e101e201ea01ee01f002030219021f0223022b
025f0268027f027f028602930299029a02ca02cf02cf02d002d602e802ed
03100322032f03380338033c03410342038a03ab03d0041504170442044f
0475047a049d04a604c004c104d104e30500051005130524052c054b058b
05c005c705f005fc060e06180626066e0683068406a506b8070407160736
07820789079b07a107d40814082308a008bb011b01280119011a00000000
0000000000000000015801c600af034c015901870154010d018a01590014
022b00a10471024a049c028f022a02ab00000000063904b00000000003a9
008e0301020f04900391019400b50101003b0084013e00770192008c00c6
017000db002c009a03bf03fe02460100030001a4013800f603cf0000ffd5
01c3013401310147004a02c804ce05c75c870224025e01d9045e060904c6
009302bb04600435040101b6017901000088038d003600ee037303e400cc
016d049000be017c0104003d023b00f4010400d6010c01100125022e003f
0149031901500366011a011b0179010000d5006e006902b1023f00c40194
026b0328017b013200f500fe00b305c30099055204d5ff4e04b5ff2000fe
007a0000000000aa022e00b00000018c03600429ff57fef70187031802c1
0326023d01f204610269feae014f013402e503310173027401fb01b30128
00a600ca024d0241011a02a4000d00f500ec00dc00fc00f100b20493038d
ffde03abfe5102bc0024055c00d200f00106005102ba01f300d300aa00be
027f020800d801ad043600b5036e00f0036002b802fd01f702f7009e00ae
016400af022701db024000ed065f04e001e56f0e011e0366006d000200a5
0006006203ee0041ffe1001f0174ffcfffbf011b024f02ba008900f105c3
026f0092007b00be0099007e0098006100f3006c000c01790005000e000e
00b300a100f200530017000300050007006e0077009a004a00ba007300d5
005d00e800a100dc00f6007f009900db02010050069c010600f000c200f5
00fa010800b9003200af010e003800e4fff604d2000000b40089030100c3
0713063e048600bd05bf073e00aaff370037006e0029009600b601da04a8
00be0472048504fc000040435554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716151413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0c05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c01182f2d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8025623701020b802564520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b53
234b515ab00225b00425b006254923451869525a58b00225b00225b00525
462345696048592121212d2cb0134358031b02592d2cb0134358021b0359
2d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b0042506
0c6423646164b0035158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab9034303438a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b12601885158b94000020063b80400885458b202400243
604259b94000040063b80800885458b202800243604259b12801885158b9
4000080063b81000885458ba000201000002436042595959595959592d2c
b0024354584b53234b515a58381b2121591b21212121592d000000010000
0006cccd8ec80dd75f0f3cf50819080000000000a351bf3600000000cbd2
ae72fb86fcfd0b1f082400030009000100010000000000010000073efe4e
00430aaafb86fa520b1f002100070000000000000000000000000b890600
010000000000023900000239000002aa007e03cb0136047300620473005a
071d00ba05c700aa01e7013602aa008702aaff60031d00c904ac00a50239
001502aa004f0239005a0239ffa704730084047300f30473007c04730068
0473003804730082047300a6047300d4047300870473008202aa009002aa
005304ac00af04ac00a504ac00af04e300fc07cd008505c7ffe905c70052
05c700c205c700590556005404e30050063900b505c70059023900470473
003b05c7005104e3005c06aa005305c7005c063900b305560053063900b3
05c7005a0556007e04e300f605c700bb055600e8078d00f00556ffc20556
00eb04e3003302aa0014023900a002aaff8e04ac00d70473ffed02aa0112
0473005c04e3004a0473007b04e300790473007702aa006e04e3004004e3
0056023900520239ff200473004d02390050071d004904e3005604e3007c
04e3fff504e3007a031d00420473002d02aa009a04e30090047300990639
00930473ffd30473000d04000022031d0056023d00b0031dff5204ac0089
05c7ffe905c7ffe905c700c20556005405c7005c063900b305c700bb0473
005c0473005c0473005c0473005c0473005c0473005c0473007b04730077
0473007704730077047300770239005202390052023900520239005204e3
005604e3007c04e3007c04e3007c04e3007c04e3007c04e3009004e30090
04e3009004e30090047300ad033300e1047300780473002a0473002c02cd
00a60473005a04e3004805e5005905e500590800012802aa017802aa00ad
046400a50800ffbe0639009f05b400e80464008204640082046400820473
0031049cffb403f4006805b400ca069600a1046400000231000002f600a8
02ec009406250087071d003f04e3006c04e3003702aa001804ac00a50464
00540473ffec0464006f04e50056047300a80473002e080000be05c7ffe9
05c7ffe9063900b30800008d078d00770473fffc08000000040001000400
0107023900df023900fd0464008203f400890473000d055600eb0156fe03
0473003702aa007a02aa001404e3007704e300740473fffe023900930239
0015040000070800008b05c7ffe90556005405c7ffe90556005405560054
02390047023900470239004702390047063900b3063900b3063900b305c7
00bb05c700bb05c700bb0239005202aa007302aa00be02aa00ae02aa00ad
02aa014e02aa013402aa000e02aa004402aa003002aa00e004e3001e0239
003d0556007e0473002d04e3003304000022023d00b005c7004b04e3007c
055600eb0473000d0556005304e3ffed04ac00a504ac00bd02aa00eb02aa
00a802aa009c06ac00ae06ac00cc06ac009b0473fff0063900b504e30040
023900470556007e0473002d05c700c20473007b05c700c20473007b04e3
0079046b008c02aa011805c7ffe90473005c05c7ffe90473005c05c70059
05eb007905c7004b0556005404730077055600540473007704e3005c0239
005004e3005c032b004d04e3005c03d5005005c7005c04e3005605c7005c
04e30056063900b304e3007c05c7005a031d004205c7005a031d00420556
007e0473002d04e300d602aa002204e300f603d5009d05c700bb04e30090
05c700bb04e3009004e300330400002204e300330400002204e100590639
00b3069400b504f6007c04e2007e03d40058054f007c034500a105a1007c
046bffed04d5007e032b007908d500140800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700d504ab00a504d5009d
04ac00a504d5022204d5010505abffe9050001c905ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f041500400400002506000055064200470473005f05ab005301eb0136
03d501360715008d0421006104d5009202d6005c02d6005c04d500b202d6
007005c7ffe90473005c05c700c20473007b05c700c20473007b05560054
0473007705560054047300770556005404730077063900b504e300400639
00b504e30040063900b504e3004005c7005904e3005605c7005904e30056
0239004702390052023900470239005202390047023900520239ffca0239
ffd50473003b0239ff2005c700510473004d0473005204e3005c0239ff8b
05c7005c04e3005605c9006304e30052063900b304e3007c063900b304e3
007c05c7005a031dffd70556007e0473002d04e300cd02aa002c05c700bb
04e3009005c700bb04e3009005c700bb04e3009005c700bb04e30090078d
00f006390093055600eb0473000d0239005005c7ffe90473005c0800ffbe
071d003f0639009f04e3006c02aa0134078d00f006390093078d00f00639
0093078d00f006390093055600eb0473000d0239013302aa00970473002a
04cd005a06ac00ae06ac009d06ac00aa06ac007202aa001d02aaffc302aa
017802aaffeb05c7ffed06d50073073f007303c9007306c1006707710084
06c700670239ffdf05c7ffe905c70052055fffb10556005404e3003305c7
00590239004705c700510556ffb106aa005305c7005c05420017063900b3
05be005b0556005304b9002704e300f6055600eb0556ffc206a100e8063f
001202390047055600eb04f6007c03d4005804e300540239005204bb0097
04f7fff40473009e03ef006b04e300540476009502390052048700540473
ffe604d3fff8047300990399007004e3007c04d8ffe30442007f04bb0097
049fff5d062f009906ad00830239005204bb009704e3007c04bb009706ad
0083055600540716010804e9005b05c000b30556007e0239004702390047
0473003b08c1ffd40856005906d400f604eb0059056b009c05c1005905c7
ffe905aa005c05c7005204e9005b05c7ff6605560054076bffe20524004c
05c1005905c1005904eb0059057fffda06aa005305c70059063900b305c1
00590556005305c700c204e300f6056b009c063f00ad0556ffc205d50052
05aa010907d5005907e9005906d500d80800005205aa005205c000960856
005905d5ffd60473005c04f4008404d500820445004204f2007a04730077
05e4ffcc0415001c04e3009004e30090040e004b04faffce05eb005004d5
004804e3007c04e3004f04e3fff50473007b071d00490473000d07140082
0473ffd3052b008804aa00cb071d0090077b009005a8008b06d5005204c0
0047046a004b06eb005204b6ffd80473007704e3005603c1004804810083
0473002d02390052023900520239ff2007c1ffce073f005204e30056040e
004b0473000d04e30090049a005903bc00380800004c092b005905b200a1
000000520000ffa60000ffb50000ffb50000008900000007000000060000
001000000010000001d30000ff980000014100000066039300f60000015d
02650063000003d40000ffd302aa009004a90022049b001503a7ffd10466
00a704ea0055022f004e034e00cf04ed004e050300a7022f00b2042c00b1
03ed001503f800b604e3004e050a002f022ffff70316002104e800760459
ffd204c0009d04b2003603ff00b30418000e0495fff2042c00b205b800a8
0563fffa045e004e045e00b2045e00b20236009f0409009f068b004e022f
004e042c00b1042c008903f8ffe803f8ffe80479fff905b800a805b800a8
05b800a805b800a804a9002204a9002204a90022049b001503a2ffd10466
00a704ea00550295004003810038050300a702950057042c00b103ed0015
03f800b6050a002f0316002104e8007604c000a904b200360418000e0495
fff2042c00b205b800a80563fffa022f004e049b001503ed001504b20036
04db00540000ffdc0000ff250000ffdc0000fe510000ffdc0000fe510000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ffdc0000ff160000ffdc0000ff200000ffdc047300870800
000006b300b3055f007c067800bb05b600900000fef30000fcdc0000fd8d
0000ff640000fd9d0000fe5c0000ff3b0000ff320000fe220000fd710000
fe910000fcd70000fd6b0000ffce0000ffc40000fe42041b004106ac00ae
06ac00a80000fefe0000fdd80000feaa0000fd6d0000ff110000fdce0000
fcb70000fbef0000fbef0000fd2b0000fc410000fc230000fc670000fc03
0000fb8b0000fc380000fb8b0000fee60000ff490000fe480000fc030000
fcb20000fdbf0000fdca0000fdca0000fd160000fcb20000fc440000fc4e
0000fb860000fd450000fd3d0000fc730000fc6b0239005205c7ffe90473
005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe9
0473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7
ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c
055600540473007705560054047300770556005404730077055600540473
007705560054047300770556005404730077055600540473007705560054
0473007702390047023900520239fffa0239fffa063900b304e3007c0639
00b304e3007c063900b304e3007c063900b304e3007c063900b304e3007c
063900b304e3007c063900b304e3007c06b300b3055f007c06b300b3055f
007c06b300b3055f007c06b300b3055f007c06b300b3055f007c05c700bb
04e3009005c700bb04e30090067800bb05b60090067800bb05b600900678
00bb05b60090067800bb05b60090067800bb05b60090055600eb0473000d
055600eb0473000d055600eb0473000d05c7ffe90473005c023900470239
0052063900b304e3007c05c700bb04e3009005c700bb04e3009005c700bb
04e3009005c700bb04e3009005c700bb04e300900000003f0000003f0000
003f0000003f04e9003903c10024076bffe205e4ffcc04eb0059040e004b
04eb0059040e004b05c7005904d50048047300e0047300ae047300740473
000b0556ffc20473ffd305aa010904aa00cb05aa006d04e3005605fb00b3
04730065063900b304e3007c022f00b2000000000350ffb8045e009004e3
004a065e006d05aa005c04e3004a05aa005204e3004a05c7009e05c700c2
0473007b05c7004b0657006d0556005f04e3007904e2000a0556003e0524
007504e3ff20063900b504f700e807780056023900500239003705c70051
0473004d023900370473ffe60749008205c7ff2904e30056063900b3073b
00b305de007c05ec006d04e3fff5055600530556007e0473004d04b90027
02e100a502aa001004e3008b02aa009a04e300f6063f00be05c700bb05ba
00af0473000d04e300330400002204e3ffff04e300230436001b0436ffd9
0473007c0473006203fa00270473002d04f0fff5023d00b003fb00b004ad
005602aa007e0aaa005909c7005908e300790956005c071c005c04720050
0a3a005c0800005c071c00560473006505c7ffe90473005c0000007005c7
ffe90473005c0800ffbe071d003f063900b504e30007063900b504e30040
05c700510473004d063900b304e3007c063900b304e3007c04e3ffff0436
ffd50239ff200aaa005909c7005908e30079063900b504e3004008480059
0582000605c7005c04e3005605c7ffe90473005c05c7ffe90473005c0556
005404730077055600540473007702390047023900260239004702390052
063900b304e3007c063900b304e3007c05c7005a031d004205c7005a031d
004205c700bb04e3009005c700bb04e300900556007e0473002d04e300f6
02aa0088049effc00429ffa905c7005904e3005605aa006d050c005b050c
007d04e300330400002205c7ffe90473005c0556005404730077063900b3
04e3007c00000047063900b304e3007c063900b304e3007c063900b304e3
007c055600eb0473000d0473009404e3007904e3004a04e3004a0473004d
0473fff804e3007904e300790473005405ec006503d400580415001c055c
001c0493007c02aaff4a04e3004004e3004004c5007c0473009604ce00a0
04e3009004e3005604e300560239003e0239006c033e00140239000a0284
000e0239003104c3004d071d0090071d0090071d004904e3ff2404e30056
0530005604e3007c06d1007c06ad007f060f007c031dffd1031dffd1031d
ffd1031dffeb031d0020031d0042031d009304b6004b04b600540473ffcd
028eff20028eff2002aa00820446ff8d02aa004002aa005204e3003e04f8
007c04bb00970473ffdb0639ffd50473ffce046e00ad0400002205920022
0436ffd50436ffcf040200c5040200970402000c0473003f063900b304f6
004b0493005204c5007c04d500480342ff5b0473ffe5039a005604e3007a
0402ffe30402002508000079077f0079099300790685009a0497009a06b7
009a06e3006e06350050054a005004450064048200490338007803380078
018cffc4023c0078023c0038023c003803330078047000d1033d007c01e7
013603cb0136023900df023900fd0239013302aa019902aa0199030700f3
030700e104ac00af04ac00af04ac007904ac007902aa01d902aa017802aa
011202aa012102aaffa202aa003202aaffd502aa008b02aa016d02aa00f3
02aa00f302aa00a602aa00a602aa00a602aa000602aaffd902aa00a2033e
00c8016f007802fa006e0330005e030700e1031000960310009603100096
031000960310009602aa006202aa006202aaffa902aa00ba040001070457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000ff4f0000ff780000fea2
0000ffbd0000002c0000ff770000002b0000ff220000ffb4000000910000
00250000ff680000ffbd0000ff810000ffe50000ffe50000001b0000007b
0000ff2e0000fe810000fee20000fef00000ff7d0000ff760000ff420000
feec0000fee90000fee30000fe6c0000fdfb0000ff0e0000fe590000fef4
0000fec20000fe6b0000ff420000ff630000fe210000fe500000fe690000
fe000000fe6f0000fe200000fe160000fe6c0000fd130000fe940000fe9a
0000febc0000fd9f0000fdf30000fe8a0000ff420000fe210000fedb0000
fe3a0000ffca000000540000fe7c0000000e0000ffd40000ff7e0000ffe5
0000fea90000fede0000ff260000fd5b0000feea0000fee70000ff7e0000
ff7e0000ff7e0000fe980000fedf0000fd1f0000ff310000ff2b0000ff53
0000ff1d0000ff140000ffc20000fef50000ff070000ff1a0000feff0000
fedd0000fe150000ff520000ffc30000ff3b0000fec402aa017802aa0009
02aa004f0483007e04bb004605fd00eb07f1009a05fd00eb060f007c06ad
00830569ffdc063900b304e3007c05c700dc0473001a04e3005003c1fff2
06030072043c004f066f00ca04e200cf0749fff7071d0013055d00be04e3
00ca05aa001604d7ffec0556007e0556007e0524006d04d4005905e100a3
04a00073040e00760384007b0569ffdc04f100410473007b0239ff200639
00b303d5007c03d5002c0556005405c100590473007704e300900a5d00b3
063a009f0693006e06c7004207c30047066500520556ffc90473ffdc0768
004706670052067900080607004108aa004707d30052052400140415fffd
06a10159062f010f063900b304e3007c064600e804e90099064600e804e9
0099091700b307da007c06a20078053000530a5d00b30742007c0000feca
0a5d00b3063a009f05c700c20402007b04ac004d0000ff5a0000ff750000
005a000000320000fc2b0000fc4c05c1005904e3009005aa005204c00047
0556005304e3fff505550048049f00320524004c0415001c04eb0059040e
004b061f00d804e6008b06fb0059058f004808ef0059074b004f05cd00b4
0485007d05c700c20473007b04e300f6071d004906fa00f6052b008805aa
010904aa00cb06e000560530002306e000560530002302390047076bffe2
05e4ffcc0546004204a90030057fffda04faffce05c7004a04d5003105c7
005904d5004805aa010904aa00cb06aa005305eb005002aa00ad05c7ffe9
0473005c05c7ffe90473005c0800ffbe071d003f055600540473007705fb
00b304730065076bffe205e4ffcc0524004c0415001c04e3000d0436ffd5
05c1005904e3009005c1005904e30090063900b304e3007c063900b304e3
007c05c00096046a004b056b009c0473000d056b009c0473000d056b009c
0473000d05aa010904aa00cb0800005206d500520556005f04e3007907d6
005f0775007907d9011806ca00b505240118041500b5080affda0784ffce
084e0059076a0048063900b504c5007c063300f609a300490000fec30000
ff7900000033000000700000fffb0000feb9000000320000ffd40000ff57
0000ff700000febc0000002c000000a20000ff6e0000fe62000000ab0000
003d0000fee50000feec0000feb40000fde20000fef5000000100000feaa
0000fece0000001d000000210000ff7a0000fe9500000041000001ac0000
00440000004400000047000000470000008d0000005c0000004405c7ffe9
0473005c05c7005204e3004a05c7005204e3004a05c7005204e3004a05c7
00c20473007b05c7005904e3007905c7005904e3007905c7005904e30077
05c7005904e3007905c7005904e300300556005404730077055600540473
007705560054047300770556005404730077055600540473007704e30050
02aa006e063900b504e3004005c7005904e3005605c7005904e3005605c7
005904e3005605c7003604e3002205c7005904e300560239ff420239ff42
023900470239005205c700510473004d05c700510473004d05c700510473
004d04e3005c0239fffa04e3005c0239000404e3005c0239ff6204e3005c
0239ff2206aa0053071d004906aa0053071d004906aa0053071d004905c7
005c04e3005605c7005c04e3005605c7005c04e3005605c7005c04e30056
063900b304e3007c063900b304e3007c063900b304e3007c063900b304e3
007c0556005304e3fff50556005304e3fff505c7005a031d004205c7005a
031dfffa05c7005a031dfffa05c7005a031dff5c0556007e0473002d0556
007e0473002d0556007e0473002d0556007e0473002d0556007e0473002d
04e300f602aa009a04e300f602aa004a04e300c402aaffb604e3007e02aa
ff7c05c700bb04e3009005c700bb04e3009005c700bb04e3009005c700bb
04e3009005c700bb04e30090055600e804730099055600e804730099078d
00f006390093078d00f0063900930556ffc20473ffd30556ffc20473ffd3
055600eb0473000d04e300330400002204e300330400002204e300330400
002204e3005602aa009a063900930473000d0473005c0239005004f6007c
04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c05c7
ffe905c7ffe906f3007406f300a006f3007406f300a006f3011106f30111
03d4005803d4005803d4005803d4005803d4005803d40058061e007a061e
00a507ae006107ae008d07ae006107ae008d04e3005404e3005404e30054
04e3005404e3005404e3005404e3005404e30054068f007a068f00a5081f
0061081f008d081f0061081f008d081f00fe081f00fe0239005202390052
0239005202390052023900520239005202390052023900520301007a0301
00a5049100610491008d049100610491008d049100fe049100fe04e3007c
04e3007c04e3007c04e3007c04e3007c04e3007c069d007a069d00a50891
00610891008d07c9006107c9008d04bb009704bb009704bb009704bb0097
04bb009704bb009704bb009704bb0097068200a507ae008d0876008d07ae
00df06ad008306ad008306ad008306ad008306ad008306ad008306ad0083
06ad008306a3007606a30076089700610897008d07cf006107cf008d07cf
00d807cf00d804f6007c04f6007c03d4005803d4005804e3005404e30054
023900520239005204e3007c04e3007c04bb009704bb009706ad008306ad
008304f6007c04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c
04f6007c05c7ffe905c7ffe906f3007406f300a006f3007406f300a006f3
011106f3011104e3ffff04e3ffff04e3ffff04e3ffff04e3ffff04e3ffff
04e3ffff04e3ffff068f007a068f00a5081f0061081f008d081f0061081f
008d081f00fe081f00fe06ad008306ad008306ad008306ad008306ad0083
06ad008306ad008306ad008306a3007606a30076089700610897008d07cf
006107cf008d07cf00d807cf00d804f6007c04f6007c04f6007c04f6007c
04f6007c04f6007c04f6007c05c7ffe905c7ffe905c7ffe905c7ffe905c7
ffe902aa019102aa004f02aa019102aa00be02aa00ad04e3ffff04e3ffff
04e3ffff04e3005404e3ffff0682008706e6009a06f300870757009a05c7
005902aa00a602aa00a602aa011102390052023900520239005202390052
023900520239005202390047023900470365008703c9009a02aa00d202aa
00d202aa011104bb009704bb009704bb009704bb009704d8ffe304d8ffe3
04bb009704bb0097055600eb055600eb06e60087074a0068061e00a502aa
ffeb02aaffeb02aa011206ad008306ad008306ad008306ad008306ad0083
07650087069d0068076b008706a30068063f001202aa017802aa01bc0473
007d05c700c205c700c2071d004905c7002909b9005a078d000705c7003f
04e3007908b0ffec0400ffd304c100660000ff2b0000ff5c0000ff320000
ff400239003e0239ff200473ffb10556005306540079039effda06480056
0413004f05a5006505a5006502aa001e02aa001e02aa005002aa005002aa
004e02aa009b02aaffdc02aaff9d02aaff9202aa00e302aa018602aa0186
02aa002602aa0026032effbe032effbc02aaffc80000003b0000006d0000
ffbd0000fec20000fefb0000fefb0000fe410000006d0000ff7b0000ff40
0000ff400556005304e3ffed04bcffda0636ffda071d003f04f300590473
007b04d9005604d9004903e800560415001c0239fffe0400003c04870054
03e1002905eb005004bc005604e3007c0473004d04e300780473005404e3
0022078d0077049e005d04e3008004e3007c04a7005604b6ffd804b6004b
03ab008704bb009704e3008005da002104e3008004730099063900930400
00220436001c03f2006604ecffea03c100480473ffdb04e3004f04a70056
062f00cd04faffce0414006105dd006103fc009603fc008c040b009603d8
009603d80096043a00d603fc009601b100960302006a0411009603590096
049d009603f7009603fc0096046100d603fb00d603a90096044100960351
00eb03d800ca0568011103130098031300c5033e00b504e400b503520078
0352009b033000b5033000b5029000890290005503530087015e0036030e
007804c2007803390078036a00b5033c00b5036a00bd036a00b3035d0044
01e700a20338009c0338009e04c2009c033600cc0372004803680043031b
00b6036b00b503ec00b50329ffd4015e0005023c00010338002d0336005e
0368ffd3031b00530352000303ec00360329ff6d061b0024059200a70616
005505190015051a00b605bf004e055800b2062bfffa04ac00550000fd85
0000fddb0000fde30473fffc0400013003d5008c04000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5005905c700c206aa004e05ebfffb0755009007a1
0079079d007a05c7ffe905c700b70473ff8704e3004b04e3ffe704730036
04000023052900cd000001020000fee50000fe590000000b0000ff4004d8
ff8905c7009e05c700c205c7009e04e9005b0473004d0000fece0000ffd3
0000ff420316003a0000fee104e3004a04e3007902aaffdb071dffc604e3
ffdb04e3ff25031dffac031dffac0473002d02aaffe40400002204e3fff6
03340075043effdd0713ffe50239003e0239003e04e3fff504bb003e04f8
002004e3004a04e3007902aa000505d000400473004d0239ffdd071d0049
04e3005604e3fff5031dffd30473002d0326ff20047300990473ffd30400
00220473005c04e3007904e300790473007703d400580415ffb604b60065
023900520473ffde028eff4304e300900436ffcd033e0073033c00ba033c
006f037500b50290005501b5007401b5ffc303530087033900d4015e0062
015e006c015e006c015e00620235fffe015e0054015e001f0258007804c2
007704c200940339ffc30339007203700076036a00b8043600b502e00022
01b6ffca01e7005e03380066037800b6033800b0033800a903360049029e
0058029e0058039e005802e80029032000b70000ff3e0000ff700000ff0a
0000ff9102aa008e031300280330003a036a003c0329ffd2033000340639
00b505c7ffe90556003805c700c202aa000b04f6007c04f6007c04f6007c
04f6007c04f6007c04f6007c04f6007c04f6007c02390052023900520239
0052023900520239005202390052023900520239005204bb009704bb0097
04bb009704bb009704bb009704bb009704bb009704bb0097023900520239
0052023900520239005204bb009704bb009704bb009704bb009703df008e
05c7000405c7006c0556ffb105560054047300090473003b0239ff20063f
00b304e3007a05c70042031d00160556009f0473000d0473004d0473007b
0473004d0239005004e9fff103c1ffcc0556ffc20473ffd30556ffc20473
ffd30524007503d40058057fffda04faffce0000ff5d0000ff9f0000ff98
0000ffc70000ff2a0000ff270000fee4000000330000fe51080000270401
001b0473004d04e3001b0239001304e300060556005305c7003a0473005c
02aaff4905c7005904e3005605c700510473004d04e30033040000220473
0076046d00590395004805a1007c0000fffd000000250000ffcc0000ffa8
0000ffb00000feda0239005205c9005905c7005c05c900ab0000fed20000
ff030000fec10000fec00000feaf0000febc0000fec90000fef30000fec2
0000fec00000fea6063900b304e3007a078d00f00639009305b900590000
ff6b063800b304d40096085b00ea06de009302aa00cc031c00a501e700d2
01e700fa040000990400009902aa014f02aa014e02aa00d702aaff6a04e3
00aa047300a504a3007b0379006d0488000a045300130487000f045f0039
048b00ab0433009f04730087048f005a0473008403ae009c047300550473
00590473003804730073047300a6043b00c8047300870473008205a3004b
05fc00b505d90059093f005a05cb00a80316fff305980059063900b304e3
00790231ffef0470004c0277007904e300790250006604e300280473007e
0473007a0316fff3027700790239005204d0ffc104ee005a04c7008604f1
005b0486005c0429005c053d00860512005b0250005b03d0003204f4005a
042c005b0628005b050c005b054a007c048c005a0553008604f6005a047b
004c041900aa04eb009d049200b8065100bd04a2ffd004a600b30429ffe2
06ccffc406b90083042c004205480011048d005a04f1004b050f005004d0
ffc104d0ffc104d0ffc104d0ffc104d0ffc104d0ffc104c700860486005c
0486005c0486005c0486005c0250005b0250005b0250005b0250005b050c
005b054a007c054a007c054a007c054a007c054a007c04eb009d04eb009d
04eb009d04eb009d04a600b304d0ffc104d0ffc104d0ffc104c7008604c7
0086053d008604f1005b04f1004b0486005c0486005c0486005c0486005c
0486005c053d0086053d008604c700860512005b0512005b0250005b0250
005b0250005b025000050250005b05d8005b03d0003204f4005a042c005b
042c005b042c005b042c005b050c005b050c005b050c005b0500005a054a
007c054a007c054a007c04f6005a04f6005a04f6005a047b004c047b004c
047b004c047b004c04190078041900aa041900aa041900aa04eb009d04eb
009d04eb009d04eb009d04eb009d04eb009d065100bd065100bd065100bd
065100bd04a600b304a600b304a600b30429ffe20429ffe20429ffe204d0
ffc106ccffc40548001104d0ffc104ee005a0417005c04d0ffb90486005c
0429ffe20512005b054a007c0250005b04f4005a047affb90628005b050c
005b043a0006054a007c0500005c048c005a041e00080419007104a60081
0583007e04a2ff9b056f00a0055c001b04d0ffc10486005c0512005b0250
005b054a007c04a600b3055c001b0250005b04a600b30486005c05d50082
0417005c04ca0086047b004c0250005b0250005b03d00032072cffc7074b
005a058a007e047b005b0455007104fc005a04d0ffc104ed005b04ee005a
0417005c04e1ffa30486005c0699ffdd04560043050c005b050c005b047b
005b04b5ffc70628005b0512005b054a007c0500005c048c005a04c70086
041900aa04550071059e007904a2ffd00507005b04bf00b806c2005b06d6
005b05c000a906b2005b04bb005b04cb005b06e1005a04f6ffcb0364005c
02aa003302aa007602aa000a02aa001b02aafff302aa001702aa002d02aa
006b02aa002302aa002402aa00c702aa00b302aa00c505a3004b05a3004b
05a3004b05a3004b05a3004b05a3004b05a3004b05a3004b05a3004b05a3
004b05a3004b05fc00b505fc00b505fc00b505fc00b505fc00b505fc00b5
05fc00b505fc00b505fc00b505fc00b505fc00b505d9005905d9005905d9
005905d9005905cb00a805cb00a805cb00a805cb00a805cb00a805cb00a8
05cb00a805cb00a805cb00a80316fff30316fff30316fff30316fff30316
fff30316fff30316fff30316fff30316fff3048d007c0316fff30316fff3
0316fff3027700790277ff8c0307007903d50079027700030316fff30316
fff30316fff30316fff30316fff30316fff30316fff30316fff305980059
04e3007904e3007904e3007904e3007904e3007904e3007904e3007904e3
007904e300790231fff20470004c027700790277ff8c0307007903d50079
027700030250ff9a0250ffa5039100660250004a04e3002804e3002804e3
002804e3002804d30044047b004c04c70086053d008602aa007f02aa0099
02aa00e302aa00ab046d005903f900a004e300a904da00dc05c1005904e4
005605c7005104e300b6047300440556000e0826ffda06e9ffce06aa0053
069bfff50821ffd60711ffd805c70051048700540882ffda071fffce08c5
005906fb004805c1005904e3004f05aa005904e3005602aa00360272004f
04ff007c06b9004704230050051400b304e4007c061100290545ff8406aa
005305c7011706380059059a0077031dffc104e3007c03e80056018cff35
0336011b0556008204e300330239ffd504c3004b00000000000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
000000660000006600000066000000660000006600000066000000660000
006600000066000000660000006600000066000000660000006600000066
0000006600000066000000660000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a0000016a0000016a0000016a0000
016a0000016a0000016a0000016a0000016a0000016a0000016a0000016a
0000016a0000016a0000016a0000016a000100000b8900f2003c006c0005
00020010002f005600000541025f000400020000000e00ae000000030000
0000006a000000000003000000070064006a0001000000000000003500ce
00010000000000030019010300010000000000040019011c000100000000
00060019013500010000000000070031014e0003000104090000006a017f
0003000104090001003201e90003000104090002000e021b000300010409
00030032022900030001040900040032025b00030001040900060032028d
0003000104090007006202bf00a900200032003000310032002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0041
007200690061006c00200020006900730020006100200074007200610064
0065006d00610072006b0020006f006600200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e002ea9203230313220546865204d6f6e6f7479706520436f
72706f726174696f6e2e20416c6c20526967687473205265736572766564
2e4b55465454552b417269616c2d426f6c644974616c69634d544b554654
54552b417269616c2d426f6c644974616c69634d544b55465454552b4172
69616c2d426f6c644974616c69634d54417269616c206973206120747261
64656d61726b206f6620546865204d6f6e6f7479706520436f72706f7261
74696f6e2e00a90020003200300031003200200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e00200041006c006c00200052006900670068007400
73002000520065007300650072007600650064002e004b00550046005400
540055002b0041007200690061006c002d0042006f006c00640049007400
61006c00690063004d00540052006500670075006c00610072004b005500
46005400540055002b0041007200690061006c002d0042006f006c006400
4900740061006c00690063004d0054004b00550046005400540055002b00
41007200690061006c002d0042006f006c0064004900740061006c006900
63004d0054004b00550046005400540055002b0041007200690061006c00
2d0042006f006c0064004900740061006c00690063004d00540041007200
690061006c00200069007300200061002000740072006100640065006d00
610072006b0020006f006600200054006800650020004d006f006e006f00
7400790070006500200043006f00720070006f0072006100740069006f00
6e002e00410c0054035a035a035a0236001d001f03590358003c001f0358
b3061d1f30bb035100010040034fb2393340b8034fb310153240b80350b3
0c123240b8034db32f333240b8034db23e3340b8034db345493240b8034d
b2503340b8034db25a3340b8034db2653380b8034db31b1b3240b8034db3
12143240b8034db30b0d320f4115034d007f034d00ef034d0003003f034d
004f034d008f034d00ff034d0004000f034d007f034d0002034cb301221f
60bd034b007f034b000200400349b34343327fbf0349009f034900df0349
000300400349b330333240b80349b335353240b80349b32f313240b80349
b327273240b80349b32225320f410c0349003f0349007f034900cf034900
df0349000500400349b30913322f4121034a007f034a0002008f034a00bf
034a00cf034a00df034a00ef034a0005000f034a002f034a004f034a0060
034a009f034a0005000f034a00df034a00020040034ab3293a3240b8034a
b312143240b8034ab30b10325041100348007f0348009f03480003009f03
48000100df034800ef0348000200400348b309103212b9ffc002dcb24041
32b9ffc002dcb2393c32b9ffc002deb33c4132d4411902de0001003002dc
004002dc005002dc006002dc00d002dc00e002dc00f002dc0007000002dc
009002dc00a002dc00b002dcb2043790412202cb0001009002c800010040
02cb0001004002c80001003002cb0001003002c80001002002cb00010020
02c80001004002a5000102a50076009002a400a002a4000202a440255fe0
06e00702bf06bf0702af06af07029f069f07024f064f07020f060f0702af
06af07020f415d0342002f0342004f0342009f03420004000f0342003f03
42005f034200af034200c0034200ff03420006002f0236007f0236000200
0f0236001f0236002f0236003f0236004f0236008f0236009f023600bf02
36000800af02360001000f0236002f0236003f0236005f0236007f023600
ff0236000600100235007f02350002000f0235002f023500d00235000300
7f0235000100100235003f0235004f02350003034a034a03420342023702
370236023602350235ffc002ccb2213432b9ffc002cbb2213432b9ffc002
cab2213432b9ffc002c9b2213432b9ffc002c8b2213432b8ffc0b36d1a3c
32b8ffc0b3e91a3532b9ffc0015bb21a3532b8ffc0b37c1a3532b8ffc0b3
761a3532b8ffc0b3601a3532b8ffc0b32e1a3532b8ffc0b22a3433b8ffc0
b22a3333b8ffc0b22a3233b8ffc0b22a3133b8ffc0b22a3033b8ffc0b22a
2f33b8ffc0b22a2a33b8ffc0b22a2933b8ffc0b22a2833b8ffc0b22a2133
b8ffc0b22a1733b8ffc0b22a1633b8ffc0b22a1533b8ffc0b22a1433b8ff
c0b22a1333b8ffc0b22a1233b8ffc0b22a0d33b8ffc0b22a0c33b8ffc0b2
2a0b33b8ffc0b32a1a3532b8ffc0b2273433b8ffc0b2273333b8ffc0b227
3233b8ffc0b2273133b8ffc0b2273033b8ffc0b2272f33b8ffc0b2272a33
b8ffc0b2272933b8ffc0b2272833b8ffc0b2272133b8ffc0b2271733b8ff
c0b2271633b8ffc0b2271533b8ffc0b2271433b8ffc0b2271333b8ffc0b2
271233b8ffc0b2270d33b8ffc0b2270c33b8ffc0b2270b33b8ffc0b3271a
3532b8ffc0b3211a3532b802ccb224351fb802cbb224351fb802cab22435
1fb802c9b224351fb802c8400b24351f6d243c1fe924351fb8015b401f24
351f7c24351f7624351f6024351f2e24351f2a24351f2724351f2124351f
b8033fb28e291fb8033eb320231f5f4109033d006f033d007f033d008f03
3d00040339b320211f1f41150338002f0338003f0338004f03380004009f
033800af033800bf03380003002f0338003f033800020335b624351f8f3f
3c1fb80119b6243c1ff724351fb801b3b224351fb801abb224351fb80156
b224351fb80155b224351fb8011b404e24351ffa24351fea24351fd22435
1f7724351f6e24351f5724351f4c24351f4324351f3d24351f3524351f37
010012e001f0010212700180019001030101000901020008001717000000
12110840bb0216000000090289b269131fb801b5b228671f411501b40028
0401001f01b3015f0401001f01b000690401001f01ab00270125001f01aa
00270156001f01a2b22a9e1fb8019fb22a321fb8019db22a291fb80165b2
281d1fb80164b228201fb80163b228301fb80161b228411fb8015bb2279e
1f4109015700270801001f0156002a019a001f0155b22a891fb80154b22a
891fb80153b22a431fb8011fb228201fb8011eb228931f410b011d006902
ab001f011b002702ab001f0119002a02abb21ffa27b80401b21ff927b802
abb61ff72a4f1fea2ab80801b61fe92a791fd528b80201400f1fd42ecd1f
d221cd1fc3282f1fc269b802ab400b1fc069cd1fbe2a4f1fb124b80401b2
1f9a2ab80156400b1f992a381f912a351f7c2eb80401400b1f772ecd1f76
2aab1f7028b802abb21f6f1fb80401b21f6e21b8019a400b1f6d27931f65
2a811f6027b8019ab61f5f2a2a1f572eb80125b21f5269b80201b21f4c2e
b80156b61f4b21cd1f4969b802ab400b1f472a2b1f4469cd1f432ab80801
b21f4128b80401b21f4027b80101401b1f3d21e41f3b2a381f372ebb1f35
2a3b1f312ee41f232a451f2269b80156b71f550d090d093790b801234036
0790dd07907207905507903407902f07902b07902607902507901e07901d
071408120810080e080c080a080808060804080208000814b8ffe0402c00
000100140610000001000604000001000410000001001002000001000200
000001000002010802004a0012b013034b024b5342b0382b4bb807ff52b0
372b4bb008505b58b101018e59b0382b4bb0c063004b6220b0f65323b801
0a515ab005234201b0124b004b544218b00288b801005458b80119b10101
8e851bb0124358b900010119858d1bb900010119858d59594358ba009f02
16000173590016763f183f123e113946443e113946443e113946443e1139
46443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b
2b2b2b2b2b2b2b2b4b5079b9001f01a8b3071f36072b2b4b5379b9009001
a8b3079036072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb0
8953205c58b9021802164544b90217021645445958b904b30218455258b9
021804b34459594bb8019a53205c58b9002002184544b900240218454459
58b90e080020455258b900200e084459594bb802ab53205c58b9001f0217
4544b90028021745445958b918a5001f455258b9001f18a54459594bb804
0153205c58b169204544b1202045445958b923000069455258b900692300
4459594bb8040153205c58b9015f00244544b1242445445958b923a0015f
455258b9015f23a04459594bb02b53205c58b127274544b12e2745445958
b9011c0027455258b90027011c4459594bb03553205c58b127274544b121
2745445958b9015f0027455258b90027015f4459594bb08c53205c58b127
274544b12a2745445958b903aa0027455258b9002703aa4459592b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b654245695342014b5058b108004259435c58b108004259161070
3eb0124358b90d193ea51bba00d203eb000b2b59b00a2342b00b2342003f
3f182b103c012f5d435c58b27f01015d595d435c58b2ef01015d59060cb0
062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373742b732b2b2b2b2b2b
2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b00184569444569444569441845694418456944737374757373
7475737473747474747473454473454474004bb02a534bb038515a58b107
0745b040604459004bb02e534bb038515a58b1030345b0406044b1090945
b04061445973737373737373732b7475742b2b2b435c584031402a343340
2a3333402a3233402a3133402a3033402a2f334027343340273333402732
33402731334027303340272f33a0410a02cb000100a002c80001009f02cb
0001009f02c8403301402a2a33402a293340272a3340272933402a123340
271233402a283340272833402a2133402a1d353240271d35324027213300
2b2b2b2b2b2b2b2b2b2b2b2b737373732b2b2b2b2b2b2b2b2b2b2b2b5900
2b7374752b2b2b737474752b732b2b2b2b2b752b0173002b7374752b2b2b
2b2b2b2b2b2b2b2b2b74002b2b2b00184569442b00>
[363 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 102 507 <0002ffb10000052b05ba0003000600d84032780588059805f90504df0501
5f050137068601a600b600f90105170327032f083f08540156066804071c
02d8020205020406b802c840370001080302022803000402060500040106
0404051f06015f068f069f06cf060406061f05df05020f053f054f058f05
0410050105050807191112392f5d717233182f5d7111332f113311331112
391112392b3f3c3f3cfd3c001133014bb020505840140300002204051404
04050201012206051406060587052e2b7d10c4872e182b7d10c459b10602
435458b40540091234002b59313001715d5d0072715d2121012103030105
2bfa86033d014f5289fe0b05bafb3b0391fc6f00>XNJBAA+Arial-BoldItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007003cb40201b70607b802f54018000504
b703000a0704b7010019080605b70203b009bfde182b10f63cfd3c4e10f4
3c4dfd3c003f3cfd3c10fc3cfd3c3130211121112521112101000400fc20
03c0fc400500fb002004c000>XNJBAA+Arial-BoldItalicMT AddT42Char 
XNJBAA+Arial-BoldItalicMT /CharStrings get begin
/g507 507 def
end
XNJBAA+Arial-BoldItalicMT /Encoding get
dup 32 /g507 put
pop
end
%ADOEndSubsetFont
/FBTFEZ+Arial-BoldItalicMT /XNJBAA+Arial-BoldItalicMT findfont ct_VMDictPut
/FBTFEZ+Arial-BoldItalicMT*1 
[32{/.notdef}rp /g507 223{/.notdef}rp]
FBTFEZ+Arial-BoldItalicMT nf
FBTFEZ+Arial-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
169.709 99.3385 mo
( )sh
%ADOBeginSubsetFont: Arial-BoldItalicMT Initial
ct_T42Dict begin
-0.559 -0.375 1.387 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-BoldItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f1137f17000000cc000000606376
74205dd36beb0000012c000006b66670676dd568c71c000007e400000662
676c7966107bf4ec000085c4000666b268656164dcfe849500000e480000
0036686865610e300ef400000e8000000024686d7478c808c70900000ea4
00002e246c6f636127c5a5b600003cc800002e286d617870117603f00000
6af0000000206e616d65c787a44c00006b1000000e35707265702692b618
0000794800000c7c67646972000000000000000000000000000303d402bc
00050008059a0533001e011b059a0533005a03d1006602120805020b0704
020202090204e0000aff000078430000000100000000544d432000210020
fffc05d3fe510133073e01b2400001bfdff70000042605b9000000200004
05ba001b05ba001b05a6001b0426001b0000ffe50000ffe50000ffe5fe6b
ffe505ba001bfe6cffe502e70000011c0000011c0000000000000000007a
00d60127011800f5011200af011d00ca00b400d8012a007c00cd01640016
001700fc02240020010500060018005400aa00ca0107005900b3ffe900a8
005700ec0401009100e0012c005600cc010e00030055009d004e0115ffab
00eb0102ffe00017003a005000900114057605d80182000501030285ff2f
000d040100830014003e009c00d3017c09b5ffd5003700bd044cfff10098
0118022a000e007000e600f00127012d0238025dff6d0061007f00c10106
03430593ff2c006e00fc0386ffa3ffe9000700530055005f007e009700eb
013e01c002af0564001c003f0048004a005d006d00a600ad026605f00001
00020026006c00a800c700e801ad01db03e803f90408045e048c0525fe3f
000e0022003300380057005f00620073008c009800be0100011f01520199
0532fd810016002000260031003800800082008900b30100010e01110115
0156019d027e02cf02ee04a905d8ffcf002600340076007e008300c100c5
00eb00f20106012e0130018201b901d10201027902fa0320ff00ffbc0028
00470052005c007700810090009900b200bc00cc01c1024d0343037703b0
04eb04fbfec4000c005a0062007b00b300c900d500d60112011c022602ec
0321038503a303cc03f503f90413048304fbfee0002200300031004c004c
0053005d0073007a0087008e00a100ab00b600ba00c100d000d100db00e5
01150138016b017c019e01bb01f601fa02210222023c026f029502b002ba
02e203160351035403710396039a03c603d304110442044b049d04b604da
062d06e80761fea5fee3ff4eff58ff81ff92ffbbffc2ffd3ffee0009000d
00220023002c0069006c00710077007f008c00ae00be00be00c800d700d9
00da00dc00e500f50100010c011b0135014a01530155016c0172018e018f
0194019801c501ce020a02110215024f02500267028602c802cf0339033b
03b8042804320445045a046b0474048605320532054d058c05a805aa05ab
05f005fc061206aa080008ccfd2afddefe68fe76feddff0aff0eff1eff30
ff69fff50005001e0038006100670087009b00a100a400a600ac00c000c4
00cc00d100d400d900dc00dd00de00df00e500f300fc0114011601180118
011b012c013e014e016a0178018101820198019b01a301b601b801bc01c3
01cd01d001d101d201d801e101e201ea01ee01f002030219021f0223022b
025f0268027f027f028602930299029a02ca02cf02cf02d002d602e802ed
03100322032f03380338033c03410342038a03ab03d0041504170442044f
0475047a049d04a604c004c104d104e30500051005130524052c054b058b
05c005c705f005fc060e06180626066e0683068406a506b8070407160736
07820789079b07a107d40814082308a008bb011b01280119011a00000000
0000000000000000015801c600af034c015901870154010d018a01590014
022b00a10471024a049c028f022a02ab00000000063904b00000000003a9
008e0301020f04900391019400b50101003b0084013e00770192008c00c6
017000db002c009a03bf03fe02460100030001a4013800f603cf0000ffd5
01c3013401310147004a02c804ce05c75c870224025e01d9045e060904c6
009302bb04600435040101b6017901000088038d003600ee037303e400cc
016d049000be017c0104003d023b00f4010400d6010c01100125022e003f
0149031901500366011a011b0179010000d5006e006902b1023f00c40194
026b0328017b013200f500fe00b305c30099055204d5ff4e04b5ff2000fe
007a0000000000aa022e00b00000018c03600429ff57fef70187031802c1
0326023d01f204610269feae014f013402e503310173027401fb01b30128
00a600ca024d0241011a02a4000d00f500ec00dc00fc00f100b20493038d
ffde03abfe5102bc0024055c00d200f00106005102ba01f300d300aa00be
027f020800d801ad043600b5036e00f0036002b802fd01f702f7009e00ae
016400af022701db024000ed065f04e001e56f0e011e0366006d000200a5
0006006203ee0041ffe1001f0174ffcfffbf011b024f02ba008900f105c3
026f0092007b00be0099007e0098006100f3006c000c01790005000e000e
00b300a100f200530017000300050007006e0077009a004a00ba007300d5
005d00e800a100dc00f6007f009900db02010050069c010600f000c200f5
00fa010800b9003200af010e003800e4fff604d2000000b40089030100c3
0713063e048600bd05bf073e00aaff370037006e0029009600b601da04a8
00be0472048504fc000040435554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716151413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0c05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c01182f2d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8025623701020b802564520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b53
234b515ab00225b00425b006254923451869525a58b00225b00225b00525
462345696048592121212d2cb0134358031b02592d2cb0134358021b0359
2d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b0042506
0c6423646164b0035158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab9034303438a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b12601885158b94000020063b80400885458b202400243
604259b94000040063b80800885458b202800243604259b12801885158b9
4000080063b81000885458ba000201000002436042595959595959592d2c
b0024354584b53234b515a58381b2121591b21212121592d000000010000
0006cccdf99b86605f0f3cf50819080000000000a351bf3600000000cbd2
ae72fb86fcfd0b1f082400030009000100010000000000010000073efe4e
00430aaafb86fa520b1f002100070000000000000000000000000b890600
010000000000023900000239000002aa007e03cb0136047300620473005a
071d00ba05c700aa01e7013602aa008702aaff60031d00c904ac00a50239
001502aa004f0239005a0239ffa704730084047300f30473007c04730068
0473003804730082047300a6047300d4047300870473008202aa009002aa
005304ac00af04ac00a504ac00af04e300fc07cd008505c7ffe905c70052
05c700c205c700590556005404e30050063900b505c70059023900470473
003b05c7005104e3005c06aa005305c7005c063900b305560053063900b3
05c7005a0556007e04e300f605c700bb055600e8078d00f00556ffc20556
00eb04e3003302aa0014023900a002aaff8e04ac00d70473ffed02aa0112
0473005c04e3004a0473007b04e300790473007702aa006e04e3004004e3
0056023900520239ff200473004d02390050071d004904e3005604e3007c
04e3fff504e3007a031d00420473002d02aa009a04e30090047300990639
00930473ffd30473000d04000022031d0056023d00b0031dff5204ac0089
05c7ffe905c7ffe905c700c20556005405c7005c063900b305c700bb0473
005c0473005c0473005c0473005c0473005c0473005c0473007b04730077
0473007704730077047300770239005202390052023900520239005204e3
005604e3007c04e3007c04e3007c04e3007c04e3007c04e3009004e30090
04e3009004e30090047300ad033300e1047300780473002a0473002c02cd
00a60473005a04e3004805e5005905e500590800012802aa017802aa00ad
046400a50800ffbe0639009f05b400e80464008204640082046400820473
0031049cffb403f4006805b400ca069600a1046400000231000002f600a8
02ec009406250087071d003f04e3006c04e3003702aa001804ac00a50464
00540473ffec0464006f04e50056047300a80473002e080000be05c7ffe9
05c7ffe9063900b30800008d078d00770473fffc08000000040001000400
0107023900df023900fd0464008203f400890473000d055600eb0156fe03
0473003702aa007a02aa001404e3007704e300740473fffe023900930239
0015040000070800008b05c7ffe90556005405c7ffe90556005405560054
02390047023900470239004702390047063900b3063900b3063900b305c7
00bb05c700bb05c700bb0239005202aa007302aa00be02aa00ae02aa00ad
02aa014e02aa013402aa000e02aa004402aa003002aa00e004e3001e0239
003d0556007e0473002d04e3003304000022023d00b005c7004b04e3007c
055600eb0473000d0556005304e3ffed04ac00a504ac00bd02aa00eb02aa
00a802aa009c06ac00ae06ac00cc06ac009b0473fff0063900b504e30040
023900470556007e0473002d05c700c20473007b05c700c20473007b04e3
0079046b008c02aa011805c7ffe90473005c05c7ffe90473005c05c70059
05eb007905c7004b0556005404730077055600540473007704e3005c0239
005004e3005c032b004d04e3005c03d5005005c7005c04e3005605c7005c
04e30056063900b304e3007c05c7005a031d004205c7005a031d00420556
007e0473002d04e300d602aa002204e300f603d5009d05c700bb04e30090
05c700bb04e3009004e300330400002204e300330400002204e100590639
00b3069400b504f6007c04e2007e03d40058054f007c034500a105a1007c
046bffed04d5007e032b007908d500140800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700d504ab00a504d5009d
04ac00a504d5022204d5010505abffe9050001c905ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f041500400400002506000055064200470473005f05ab005301eb0136
03d501360715008d0421006104d5009202d6005c02d6005c04d500b202d6
007005c7ffe90473005c05c700c20473007b05c700c20473007b05560054
0473007705560054047300770556005404730077063900b504e300400639
00b504e30040063900b504e3004005c7005904e3005605c7005904e30056
0239004702390052023900470239005202390047023900520239ffca0239
ffd50473003b0239ff2005c700510473004d0473005204e3005c0239ff8b
05c7005c04e3005605c9006304e30052063900b304e3007c063900b304e3
007c05c7005a031dffd70556007e0473002d04e300cd02aa002c05c700bb
04e3009005c700bb04e3009005c700bb04e3009005c700bb04e30090078d
00f006390093055600eb0473000d0239005005c7ffe90473005c0800ffbe
071d003f0639009f04e3006c02aa0134078d00f006390093078d00f00639
0093078d00f006390093055600eb0473000d0239013302aa00970473002a
04cd005a06ac00ae06ac009d06ac00aa06ac007202aa001d02aaffc302aa
017802aaffeb05c7ffed06d50073073f007303c9007306c1006707710084
06c700670239ffdf05c7ffe905c70052055fffb10556005404e3003305c7
00590239004705c700510556ffb106aa005305c7005c05420017063900b3
05be005b0556005304b9002704e300f6055600eb0556ffc206a100e8063f
001202390047055600eb04f6007c03d4005804e300540239005204bb0097
04f7fff40473009e03ef006b04e300540476009502390052048700540473
ffe604d3fff8047300990399007004e3007c04d8ffe30442007f04bb0097
049fff5d062f009906ad00830239005204bb009704e3007c04bb009706ad
0083055600540716010804e9005b05c000b30556007e0239004702390047
0473003b08c1ffd40856005906d400f604eb0059056b009c05c1005905c7
ffe905aa005c05c7005204e9005b05c7ff6605560054076bffe20524004c
05c1005905c1005904eb0059057fffda06aa005305c70059063900b305c1
00590556005305c700c204e300f6056b009c063f00ad0556ffc205d50052
05aa010907d5005907e9005906d500d80800005205aa005205c000960856
005905d5ffd60473005c04f4008404d500820445004204f2007a04730077
05e4ffcc0415001c04e3009004e30090040e004b04faffce05eb005004d5
004804e3007c04e3004f04e3fff50473007b071d00490473000d07140082
0473ffd3052b008804aa00cb071d0090077b009005a8008b06d5005204c0
0047046a004b06eb005204b6ffd80473007704e3005603c1004804810083
0473002d02390052023900520239ff2007c1ffce073f005204e30056040e
004b0473000d04e30090049a005903bc00380800004c092b005905b200a1
000000520000ffa60000ffb50000ffb50000008900000007000000060000
001000000010000001d30000ff980000014100000066039300f60000015d
02650063000003d40000ffd302aa009004a90022049b001503a7ffd10466
00a704ea0055022f004e034e00cf04ed004e050300a7022f00b2042c00b1
03ed001503f800b604e3004e050a002f022ffff70316002104e800760459
ffd204c0009d04b2003603ff00b30418000e0495fff2042c00b205b800a8
0563fffa045e004e045e00b2045e00b20236009f0409009f068b004e022f
004e042c00b1042c008903f8ffe803f8ffe80479fff905b800a805b800a8
05b800a805b800a804a9002204a9002204a90022049b001503a2ffd10466
00a704ea00550295004003810038050300a702950057042c00b103ed0015
03f800b6050a002f0316002104e8007604c000a904b200360418000e0495
fff2042c00b205b800a80563fffa022f004e049b001503ed001504b20036
04db00540000ffdc0000ff250000ffdc0000fe510000ffdc0000fe510000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ffdc0000ff160000ffdc0000ff200000ffdc047300870800
000006b300b3055f007c067800bb05b600900000fef30000fcdc0000fd8d
0000ff640000fd9d0000fe5c0000ff3b0000ff320000fe220000fd710000
fe910000fcd70000fd6b0000ffce0000ffc40000fe42041b004106ac00ae
06ac00a80000fefe0000fdd80000feaa0000fd6d0000ff110000fdce0000
fcb70000fbef0000fbef0000fd2b0000fc410000fc230000fc670000fc03
0000fb8b0000fc380000fb8b0000fee60000ff490000fe480000fc030000
fcb20000fdbf0000fdca0000fdca0000fd160000fcb20000fc440000fc4e
0000fb860000fd450000fd3d0000fc730000fc6b0239005205c7ffe90473
005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe9
0473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7
ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c
055600540473007705560054047300770556005404730077055600540473
007705560054047300770556005404730077055600540473007705560054
0473007702390047023900520239fffa0239fffa063900b304e3007c0639
00b304e3007c063900b304e3007c063900b304e3007c063900b304e3007c
063900b304e3007c063900b304e3007c06b300b3055f007c06b300b3055f
007c06b300b3055f007c06b300b3055f007c06b300b3055f007c05c700bb
04e3009005c700bb04e30090067800bb05b60090067800bb05b600900678
00bb05b60090067800bb05b60090067800bb05b60090055600eb0473000d
055600eb0473000d055600eb0473000d05c7ffe90473005c023900470239
0052063900b304e3007c05c700bb04e3009005c700bb04e3009005c700bb
04e3009005c700bb04e3009005c700bb04e300900000003f0000003f0000
003f0000003f04e9003903c10024076bffe205e4ffcc04eb0059040e004b
04eb0059040e004b05c7005904d50048047300e0047300ae047300740473
000b0556ffc20473ffd305aa010904aa00cb05aa006d04e3005605fb00b3
04730065063900b304e3007c022f00b2000000000350ffb8045e009004e3
004a065e006d05aa005c04e3004a05aa005204e3004a05c7009e05c700c2
0473007b05c7004b0657006d0556005f04e3007904e2000a0556003e0524
007504e3ff20063900b504f700e807780056023900500239003705c70051
0473004d023900370473ffe60749008205c7ff2904e30056063900b3073b
00b305de007c05ec006d04e3fff5055600530556007e0473004d04b90027
02e100a502aa001004e3008b02aa009a04e300f6063f00be05c700bb05ba
00af0473000d04e300330400002204e3ffff04e300230436001b0436ffd9
0473007c0473006203fa00270473002d04f0fff5023d00b003fb00b004ad
005602aa007e0aaa005909c7005908e300790956005c071c005c04720050
0a3a005c0800005c071c00560473006505c7ffe90473005c0000007005c7
ffe90473005c0800ffbe071d003f063900b504e30007063900b504e30040
05c700510473004d063900b304e3007c063900b304e3007c04e3ffff0436
ffd50239ff200aaa005909c7005908e30079063900b504e3004008480059
0582000605c7005c04e3005605c7ffe90473005c05c7ffe90473005c0556
005404730077055600540473007702390047023900260239004702390052
063900b304e3007c063900b304e3007c05c7005a031d004205c7005a031d
004205c700bb04e3009005c700bb04e300900556007e0473002d04e300f6
02aa0088049effc00429ffa905c7005904e3005605aa006d050c005b050c
007d04e300330400002205c7ffe90473005c0556005404730077063900b3
04e3007c00000047063900b304e3007c063900b304e3007c063900b304e3
007c055600eb0473000d0473009404e3007904e3004a04e3004a0473004d
0473fff804e3007904e300790473005405ec006503d400580415001c055c
001c0493007c02aaff4a04e3004004e3004004c5007c0473009604ce00a0
04e3009004e3005604e300560239003e0239006c033e00140239000a0284
000e0239003104c3004d071d0090071d0090071d004904e3ff2404e30056
0530005604e3007c06d1007c06ad007f060f007c031dffd1031dffd1031d
ffd1031dffeb031d0020031d0042031d009304b6004b04b600540473ffcd
028eff20028eff2002aa00820446ff8d02aa004002aa005204e3003e04f8
007c04bb00970473ffdb0639ffd50473ffce046e00ad0400002205920022
0436ffd50436ffcf040200c5040200970402000c0473003f063900b304f6
004b0493005204c5007c04d500480342ff5b0473ffe5039a005604e3007a
0402ffe30402002508000079077f0079099300790685009a0497009a06b7
009a06e3006e06350050054a005004450064048200490338007803380078
018cffc4023c0078023c0038023c003803330078047000d1033d007c01e7
013603cb0136023900df023900fd0239013302aa019902aa0199030700f3
030700e104ac00af04ac00af04ac007904ac007902aa01d902aa017802aa
011202aa012102aaffa202aa003202aaffd502aa008b02aa016d02aa00f3
02aa00f302aa00a602aa00a602aa00a602aa000602aaffd902aa00a2033e
00c8016f007802fa006e0330005e030700e1031000960310009603100096
031000960310009602aa006202aa006202aaffa902aa00ba040001070457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000ff4f0000ff780000fea2
0000ffbd0000002c0000ff770000002b0000ff220000ffb4000000910000
00250000ff680000ffbd0000ff810000ffe50000ffe50000001b0000007b
0000ff2e0000fe810000fee20000fef00000ff7d0000ff760000ff420000
feec0000fee90000fee30000fe6c0000fdfb0000ff0e0000fe590000fef4
0000fec20000fe6b0000ff420000ff630000fe210000fe500000fe690000
fe000000fe6f0000fe200000fe160000fe6c0000fd130000fe940000fe9a
0000febc0000fd9f0000fdf30000fe8a0000ff420000fe210000fedb0000
fe3a0000ffca000000540000fe7c0000000e0000ffd40000ff7e0000ffe5
0000fea90000fede0000ff260000fd5b0000feea0000fee70000ff7e0000
ff7e0000ff7e0000fe980000fedf0000fd1f0000ff310000ff2b0000ff53
0000ff1d0000ff140000ffc20000fef50000ff070000ff1a0000feff0000
fedd0000fe150000ff520000ffc30000ff3b0000fec402aa017802aa0009
02aa004f0483007e04bb004605fd00eb07f1009a05fd00eb060f007c06ad
00830569ffdc063900b304e3007c05c700dc0473001a04e3005003c1fff2
06030072043c004f066f00ca04e200cf0749fff7071d0013055d00be04e3
00ca05aa001604d7ffec0556007e0556007e0524006d04d4005905e100a3
04a00073040e00760384007b0569ffdc04f100410473007b0239ff200639
00b303d5007c03d5002c0556005405c100590473007704e300900a5d00b3
063a009f0693006e06c7004207c30047066500520556ffc90473ffdc0768
004706670052067900080607004108aa004707d30052052400140415fffd
06a10159062f010f063900b304e3007c064600e804e90099064600e804e9
0099091700b307da007c06a20078053000530a5d00b30742007c0000feca
0a5d00b3063a009f05c700c20402007b04ac004d0000ff5a0000ff750000
005a000000320000fc2b0000fc4c05c1005904e3009005aa005204c00047
0556005304e3fff505550048049f00320524004c0415001c04eb0059040e
004b061f00d804e6008b06fb0059058f004808ef0059074b004f05cd00b4
0485007d05c700c20473007b04e300f6071d004906fa00f6052b008805aa
010904aa00cb06e000560530002306e000560530002302390047076bffe2
05e4ffcc0546004204a90030057fffda04faffce05c7004a04d5003105c7
005904d5004805aa010904aa00cb06aa005305eb005002aa00ad05c7ffe9
0473005c05c7ffe90473005c0800ffbe071d003f055600540473007705fb
00b304730065076bffe205e4ffcc0524004c0415001c04e3000d0436ffd5
05c1005904e3009005c1005904e30090063900b304e3007c063900b304e3
007c05c00096046a004b056b009c0473000d056b009c0473000d056b009c
0473000d05aa010904aa00cb0800005206d500520556005f04e3007907d6
005f0775007907d9011806ca00b505240118041500b5080affda0784ffce
084e0059076a0048063900b504c5007c063300f609a300490000fec30000
ff7900000033000000700000fffb0000feb9000000320000ffd40000ff57
0000ff700000febc0000002c000000a20000ff6e0000fe62000000ab0000
003d0000fee50000feec0000feb40000fde20000fef5000000100000feaa
0000fece0000001d000000210000ff7a0000fe9500000041000001ac0000
00440000004400000047000000470000008d0000005c0000004405c7ffe9
0473005c05c7005204e3004a05c7005204e3004a05c7005204e3004a05c7
00c20473007b05c7005904e3007905c7005904e3007905c7005904e30077
05c7005904e3007905c7005904e300300556005404730077055600540473
007705560054047300770556005404730077055600540473007704e30050
02aa006e063900b504e3004005c7005904e3005605c7005904e3005605c7
005904e3005605c7003604e3002205c7005904e300560239ff420239ff42
023900470239005205c700510473004d05c700510473004d05c700510473
004d04e3005c0239fffa04e3005c0239000404e3005c0239ff6204e3005c
0239ff2206aa0053071d004906aa0053071d004906aa0053071d004905c7
005c04e3005605c7005c04e3005605c7005c04e3005605c7005c04e30056
063900b304e3007c063900b304e3007c063900b304e3007c063900b304e3
007c0556005304e3fff50556005304e3fff505c7005a031d004205c7005a
031dfffa05c7005a031dfffa05c7005a031dff5c0556007e0473002d0556
007e0473002d0556007e0473002d0556007e0473002d0556007e0473002d
04e300f602aa009a04e300f602aa004a04e300c402aaffb604e3007e02aa
ff7c05c700bb04e3009005c700bb04e3009005c700bb04e3009005c700bb
04e3009005c700bb04e30090055600e804730099055600e804730099078d
00f006390093078d00f0063900930556ffc20473ffd30556ffc20473ffd3
055600eb0473000d04e300330400002204e300330400002204e300330400
002204e3005602aa009a063900930473000d0473005c0239005004f6007c
04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c05c7
ffe905c7ffe906f3007406f300a006f3007406f300a006f3011106f30111
03d4005803d4005803d4005803d4005803d4005803d40058061e007a061e
00a507ae006107ae008d07ae006107ae008d04e3005404e3005404e30054
04e3005404e3005404e3005404e3005404e30054068f007a068f00a5081f
0061081f008d081f0061081f008d081f00fe081f00fe0239005202390052
0239005202390052023900520239005202390052023900520301007a0301
00a5049100610491008d049100610491008d049100fe049100fe04e3007c
04e3007c04e3007c04e3007c04e3007c04e3007c069d007a069d00a50891
00610891008d07c9006107c9008d04bb009704bb009704bb009704bb0097
04bb009704bb009704bb009704bb0097068200a507ae008d0876008d07ae
00df06ad008306ad008306ad008306ad008306ad008306ad008306ad0083
06ad008306a3007606a30076089700610897008d07cf006107cf008d07cf
00d807cf00d804f6007c04f6007c03d4005803d4005804e3005404e30054
023900520239005204e3007c04e3007c04bb009704bb009706ad008306ad
008304f6007c04f6007c04f6007c04f6007c04f6007c04f6007c04f6007c
04f6007c05c7ffe905c7ffe906f3007406f300a006f3007406f300a006f3
011106f3011104e3ffff04e3ffff04e3ffff04e3ffff04e3ffff04e3ffff
04e3ffff04e3ffff068f007a068f00a5081f0061081f008d081f0061081f
008d081f00fe081f00fe06ad008306ad008306ad008306ad008306ad0083
06ad008306ad008306ad008306a3007606a30076089700610897008d07cf
006107cf008d07cf00d807cf00d804f6007c04f6007c04f6007c04f6007c
04f6007c04f6007c04f6007c05c7ffe905c7ffe905c7ffe905c7ffe905c7
ffe902aa019102aa004f02aa019102aa00be02aa00ad04e3ffff04e3ffff
04e3ffff04e3005404e3ffff0682008706e6009a06f300870757009a05c7
005902aa00a602aa00a602aa011102390052023900520239005202390052
023900520239005202390047023900470365008703c9009a02aa00d202aa
00d202aa011104bb009704bb009704bb009704bb009704d8ffe304d8ffe3
04bb009704bb0097055600eb055600eb06e60087074a0068061e00a502aa
ffeb02aaffeb02aa011206ad008306ad008306ad008306ad008306ad0083
07650087069d0068076b008706a30068063f001202aa017802aa01bc0473
007d05c700c205c700c2071d004905c7002909b9005a078d000705c7003f
04e3007908b0ffec0400ffd304c100660000ff2b0000ff5c0000ff320000
ff400239003e0239ff200473ffb10556005306540079039effda06480056
0413004f05a5006505a5006502aa001e02aa001e02aa005002aa005002aa
004e02aa009b02aaffdc02aaff9d02aaff9202aa00e302aa018602aa0186
02aa002602aa0026032effbe032effbc02aaffc80000003b0000006d0000
ffbd0000fec20000fefb0000fefb0000fe410000006d0000ff7b0000ff40
0000ff400556005304e3ffed04bcffda0636ffda071d003f04f300590473
007b04d9005604d9004903e800560415001c0239fffe0400003c04870054
03e1002905eb005004bc005604e3007c0473004d04e300780473005404e3
0022078d0077049e005d04e3008004e3007c04a7005604b6ffd804b6004b
03ab008704bb009704e3008005da002104e3008004730099063900930400
00220436001c03f2006604ecffea03c100480473ffdb04e3004f04a70056
062f00cd04faffce0414006105dd006103fc009603fc008c040b009603d8
009603d80096043a00d603fc009601b100960302006a0411009603590096
049d009603f7009603fc0096046100d603fb00d603a90096044100960351
00eb03d800ca0568011103130098031300c5033e00b504e400b503520078
0352009b033000b5033000b5029000890290005503530087015e0036030e
007804c2007803390078036a00b5033c00b5036a00bd036a00b3035d0044
01e700a20338009c0338009e04c2009c033600cc0372004803680043031b
00b6036b00b503ec00b50329ffd4015e0005023c00010338002d0336005e
0368ffd3031b00530352000303ec00360329ff6d061b0024059200a70616
005505190015051a00b605bf004e055800b2062bfffa04ac00550000fd85
0000fddb0000fde30473fffc0400013003d5008c04000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5005905c700c206aa004e05ebfffb0755009007a1
0079079d007a05c7ffe905c700b70473ff8704e3004b04e3ffe704730036
04000023052900cd000001020000fee50000fe590000000b0000ff4004d8
ff8905c7009e05c700c205c7009e04e9005b0473004d0000fece0000ffd3
0000ff420316003a0000fee104e3004a04e3007902aaffdb071dffc604e3
ffdb04e3ff25031dffac031dffac0473002d02aaffe40400002204e3fff6
03340075043effdd0713ffe50239003e0239003e04e3fff504bb003e04f8
002004e3004a04e3007902aa000505d000400473004d0239ffdd071d0049
04e3005604e3fff5031dffd30473002d0326ff20047300990473ffd30400
00220473005c04e3007904e300790473007703d400580415ffb604b60065
023900520473ffde028eff4304e300900436ffcd033e0073033c00ba033c
006f037500b50290005501b5007401b5ffc303530087033900d4015e0062
015e006c015e006c015e00620235fffe015e0054015e001f0258007804c2
007704c200940339ffc30339007203700076036a00b8043600b502e00022
01b6ffca01e7005e03380066037800b6033800b0033800a903360049029e
0058029e0058039e005802e80029032000b70000ff3e0000ff700000ff0a
0000ff9102aa008e031300280330003a036a003c0329ffd2033000340639
00b505c7ffe90556003805c700c202aa000b04f6007c04f6007c04f6007c
04f6007c04f6007c04f6007c04f6007c04f6007c02390052023900520239
0052023900520239005202390052023900520239005204bb009704bb0097
04bb009704bb009704bb009704bb009704bb009704bb0097023900520239
0052023900520239005204bb009704bb009704bb009704bb009703df008e
05c7000405c7006c0556ffb105560054047300090473003b0239ff20063f
00b304e3007a05c70042031d00160556009f0473000d0473004d0473007b
0473004d0239005004e9fff103c1ffcc0556ffc20473ffd30556ffc20473
ffd30524007503d40058057fffda04faffce0000ff5d0000ff9f0000ff98
0000ffc70000ff2a0000ff270000fee4000000330000fe51080000270401
001b0473004d04e3001b0239001304e300060556005305c7003a0473005c
02aaff4905c7005904e3005605c700510473004d04e30033040000220473
0076046d00590395004805a1007c0000fffd000000250000ffcc0000ffa8
0000ffb00000feda0239005205c9005905c7005c05c900ab0000fed20000
ff030000fec10000fec00000feaf0000febc0000fec90000fef30000fec2
0000fec00000fea6063900b304e3007a078d00f00639009305b900590000
ff6b063800b304d40096085b00ea06de009302aa00cc031c00a501e700d2
01e700fa040000990400009902aa014f02aa014e02aa00d702aaff6a04e3
00aa047300a504a3007b0379006d0488000a045300130487000f045f0039
048b00ab0433009f04730087048f005a0473008403ae009c047300550473
00590473003804730073047300a6043b00c8047300870473008205a3004b
05fc00b505d90059093f005a05cb00a80316fff305980059063900b304e3
00790231ffef0470004c0277007904e300790250006604e300280473007e
0473007a0316fff3027700790239005204d0ffc104ee005a04c7008604f1
005b0486005c0429005c053d00860512005b0250005b03d0003204f4005a
042c005b0628005b050c005b054a007c048c005a0553008604f6005a047b
004c041900aa04eb009d049200b8065100bd04a2ffd004a600b30429ffe2
06ccffc406b90083042c004205480011048d005a04f1004b050f005004d0
ffc104d0ffc104d0ffc104d0ffc104d0ffc104d0ffc104c700860486005c
0486005c0486005c0486005c0250005b0250005b0250005b0250005b050c
005b054a007c054a007c054a007c054a007c054a007c04eb009d04eb009d
04eb009d04eb009d04a600b304d0ffc104d0ffc104d0ffc104c7008604c7
0086053d008604f1005b04f1004b0486005c0486005c0486005c0486005c
0486005c053d0086053d008604c700860512005b0512005b0250005b0250
005b0250005b025000050250005b05d8005b03d0003204f4005a042c005b
042c005b042c005b042c005b050c005b050c005b050c005b0500005a054a
007c054a007c054a007c04f6005a04f6005a04f6005a047b004c047b004c
047b004c047b004c04190078041900aa041900aa041900aa04eb009d04eb
009d04eb009d04eb009d04eb009d04eb009d065100bd065100bd065100bd
065100bd04a600b304a600b304a600b30429ffe20429ffe20429ffe204d0
ffc106ccffc40548001104d0ffc104ee005a0417005c04d0ffb90486005c
0429ffe20512005b054a007c0250005b04f4005a047affb90628005b050c
005b043a0006054a007c0500005c048c005a041e00080419007104a60081
0583007e04a2ff9b056f00a0055c001b04d0ffc10486005c0512005b0250
005b054a007c04a600b3055c001b0250005b04a600b30486005c05d50082
0417005c04ca0086047b004c0250005b0250005b03d00032072cffc7074b
005a058a007e047b005b0455007104fc005a04d0ffc104ed005b04ee005a
0417005c04e1ffa30486005c0699ffdd04560043050c005b050c005b047b
005b04b5ffc70628005b0512005b054a007c0500005c048c005a04c70086
041900aa04550071059e007904a2ffd00507005b04bf00b806c2005b06d6
005b05c000a906b2005b04bb005b04cb005b06e1005a04f6ffcb0364005c
02aa003302aa007602aa000a02aa001b02aafff302aa001702aa002d02aa
006b02aa002302aa002402aa00c702aa00b302aa00c505a3004b05a3004b
05a3004b05a3004b05a3004b05a3004b05a3004b05a3004b05a3004b05a3
004b05a3004b05fc00b505fc00b505fc00b505fc00b505fc00b505fc00b5
05fc00b505fc00b505fc00b505fc00b505fc00b505d9005905d9005905d9
005905d9005905cb00a805cb00a805cb00a805cb00a805cb00a805cb00a8
05cb00a805cb00a805cb00a80316fff30316fff30316fff30316fff30316
fff30316fff30316fff30316fff30316fff3048d007c0316fff30316fff3
0316fff3027700790277ff8c0307007903d50079027700030316fff30316
fff30316fff30316fff30316fff30316fff30316fff30316fff305980059
04e3007904e3007904e3007904e3007904e3007904e3007904e3007904e3
007904e300790231fff20470004c027700790277ff8c0307007903d50079
027700030250ff9a0250ffa5039100660250004a04e3002804e3002804e3
002804e3002804d30044047b004c04c70086053d008602aa007f02aa0099
02aa00e302aa00ab046d005903f900a004e300a904da00dc05c1005904e4
005605c7005104e300b6047300440556000e0826ffda06e9ffce06aa0053
069bfff50821ffd60711ffd805c70051048700540882ffda071fffce08c5
005906fb004805c1005904e3004f05aa005904e3005602aa00360272004f
04ff007c06b9004704230050051400b304e4007c061100290545ff8406aa
005305c7011706380059059a0077031dffc104e3007c03e80056018cff35
0336011b0556008204e300330239ffd504c3004b00000000000000660000
00660000006600000066000001500000019800000392000005b600000764
0000094a000009d000000a5e00000af000000c6600000d2200000db20000
0e0200000e4400000eac00000f680000102e000011e2000013580000150c
0000167a000017ea000018e200001a3a00001b8600001c0600001cc20000
1d5a00001e0600001ea400001fda000021f000002342000024c0000025d6
000026d8000027f6000028da00002aa200002bbc00002caa00002da60000
2f7200003032000032d200003532000036120000371a0000388000003a2e
00003c2a00003d6c00003ec600003fb8000041aa00004374000045260000
468800004770000047bc000048aa000049460000497c000049c600004c06
00004d4400004e5800004f8a000051cc000053840000556c000056f20000
5826000059dc00005c0e00005ca600005f38000060fc0000620a0000636c
0000651e0000663c0000687800006a9a00006c4000006d8000006f940000
720c000074380000757a0000771c0000777600007918000079ce00007a16
00007a6c00007aa400007ad600007b0c00007b4c00007b9200007bcc0000
7c0400007c3e00007c8800007cc000007cfc00007d2e00007d5e00007d96
00007dd600007e1400007e5c00007e9400007ec800007efe00007f2e0000
7f5e00007f8e00007fc600007ff80000802e00008072000080a8000080da
0000812000008218000082a20000844c000085c600008764000087d00000
889c000089f600008bdc00008d6400008e8800008ede00008f8600009100
000092b200009422000095680000967e0000977800009856000099e00000
9b3800009c2a00009d0e00009d6e00009e5a00009f160000a04a0000a0ca
0000a2100000a45e0000a65e0000a7800000a8800000a9020000a9a80000
aaca0000ac360000acbc0000ad780000ae460000aeec0000af2a0000af6e
0000afa80000b1620000b3080000b3420000b37a0000b4440000b53a0000
b5ba0000b6460000b7440000b84a0000b8880000b8c00000b9160000ba22
0000ba720000bac20000bd340000bf0e0000c0600000c0920000c1140000
c1fc0000c46c0000c4b20000c4e80000c5200000c5540000c58a0000c5c4
0000c60e0000c65e0000c6980000c6cc0000c7060000c73a0000c77e0000
c7c60000c81c0000c8aa0000c9320000c9ea0000ca300000cac60000cb16
0000cbe80000cc900000cd200000cd860000cdf00000cefe0000cff00000
d0240000d05a0000d0980000d0e40000d1720000d29c0000d43a0000d46c
0000d49e0000d59a0000d6bc0000d7260000d87c0000d9220000da6a0000
dbc80000ddd80000dfd00000e24e0000e3560000e38e0000e3ce0000e410
0000e4500000e4900000e4c00000e4f00000e5280000e5660000e6fa0000
e72e0000e75e0000e79a0000e7de0000e8040000e82a0000e8600000e9d4
0000e9e40000ea0c0000ea320000ea640000ea980000eaca0000eafa0000
ec1a0000ecf40000ed300000ed820000edc60000edfe0000ee520000ee90
0000eec20000eef80000ef300000ef600000ef980000efd00000f0000000
f0380000f05e0000f0820000f0c20000f2920000f2ce0000f30c0000f354
0000f3860000f3bc0000f3f40000f42e0000f46a0000f5160000f62c0000
f7a40000f8c20000fa420000fb820000fc6a0000fd7e0000ff200000ff7e
0000ffac000100ce000103d2000104120001045200010492000104d00001
052e0001058c000105fa0001061a000106d6000107ac000107e200010850
0001089a000108e4000109000001091c0001093c0001095c0001097c0001
099c000109c2000109e800010a0e00010a3400010a6400010a8c00010ab4
00010ae000010b0c00010b4000010b6a00010b9600010bcc00010bf60001
0c2200010c5800010c8200010cac00010ce000010d1000010d4400010d88
00010db800010dec00010e2e00010e6200010e9400010ed600010f0a0001
0f3a00010f7c00010fc000011006000110620001107e0001109a000110b6
000110d2000110ee0001125c000115080001177800011794000117ae0001
17ca000117e6000118020001181e00011878000118b20001191c000119e6
00011a8600011b5c00011bdc00011c6400011cd200011d6800011dc00001
1e0000011e5e00011ec000011f0400011f9000011fd800011fe800012034
000121e800012316000123400001235c00012388000123c00001240c0001
243c00012470000124aa000124e8000125180001254800012578000125ae
000125e200012626000126560001268a000126c2000126fa0001272a0001
275a0001278a000129ce000129fe00012a3200012c1a00012e4200012e82
00012eb400012ee800012f1e00012f5600012f8400012fa800012fcc0001
300800013196000131c0000132100001335c00013382000133aa000133d0
000133f60001350a000136d000013700000137340001376a0001379a0001
37c0000137f2000138300001387800013a3c00013c5800013c8800013cb8
00013ce800013d1800013d5000013d8600013dac00013dd200013e020001
3e3200013e6200013e9200013f3800013f8000013fae00013fde0001400e
0001404200014078000140b0000140e00001411000014140000141700001
41a4000141d80001420c00014244000142d60001433a0001456000014622
000147e000014a5000014cbe00014e9200014f0c00014f8600014fd40001
5086000151d600015354000154ce000155a8000156a00001582400015996
000159ce000159de000159ee00015af200015b0200015b1200015b220001
5b3200015b4200015c4000015c5000015c6000015d6600015d7600015e5c
00015e6c00015fd400015fe400015ff400016004000161aa000162be0001
62f2000163260001635600016384000163b4000163e80001641e00016578
000166ac000167ee0001695000016a4600016a5600016b9400016c7e0001
6dea00016dfa00016f6e00016f7e000170d0000172000001735a000174cc
000176a6000178060001783800017872000178a2000178d2000179060001
793a00017aca00017afa00017c0e00017c1e00017c2e00017c6200017c72
00017e0c00017f74000180fc0001812c00018160000182ac000182bc0001
83e6000183f6000184900001864400018654000188d000018a0a00018b96
00018bc600018d2a00018e6400018e7400018e8400018e9400018f840001
8f9400018fa400018fb40001910800019290000192a0000193c800019518
0001968c0001982a0001994800019a7c00019b9800019ca400019dd80001
9f7a00019f8a0001a0ba0001a1b80001a2d40001a3f20001a4020001a64e
0001a79c0001a7ac0001a7e40001a9400001aa620001ac2c0001ad7c0001
ad8c0001ae5a0001ae6a0001ae7a0001ae8a0001ae9a0001b05c0001b06c
0001b2260001b3400001b5260001b75a0001b8840001b9e60001baca0001
bbc80001bd0e0001be840001bebe0001c0fc0001c1b20001c2b80001c2c8
0001c2d80001c30a0001c31a0001c4b60001c61e0001c80a0001c83a0001
c87a0001ca560001cb460001cc2c0001cc660001ce6c0001cfa40001d042
0001d1600001d2120001d3100001d36e0001d3f40001d4ac0001d4ee0001
d5820001d5cc0001d6ca0001d7220001d77c0001d7ca0001d83c0001d8be
0001d90a0001d95e0001da080001db780001dc8c0001ddca0001de680001
df9a0001e01e0001e0be0001e1da0001e3040001e39e0001e4860001e524
0001e5f20001e7160001e87c0001e8f40001e9ca0001ea900001eb340001
ec8a0001edd00001eed40001f0140001f1460001f2380001f3580001f4be
0001f5c00001f6e80001f8180001f84c0001f8ba0001fa7c0001faa80001
fafa0001fb440001fb780001fbee0001fc960001fcbc0001fce20001fd7e
0001fe1a0001fe480001fe700001fed60001ff180001ff8e0001ffce0002
00200002009c000200ee0002013e000201c8000201fc00020254000202aa
0002030c00020362000203c0000205bc000207b0000207fc0002085e0002
08900002091c00020972000209ac000209fe00020a2200020a6000020c74
00020c9a00020d3800020d9800020df600020e2600020e5600020ea60002
0ef600020f3600020fa800020ffc0002105a000210b0000210e600021128
0002116e000211b8000211e80002122000021250000213b8000216fe0002
181e0002190400021a4a00021baa00021c0800021c6600021cee00021d5a
00021dc600021e4e00021f3000022004000220e8000221be000222600002
2310000223bc00022444000224b4000224ec000226500002280a00022a08
00022a7600022ae600022b5400022bc200022c8000022d3e00022de00002
2e8c00022f3800022fd60002307400023112000231240002313600023148
0002315a0002316c000231f40002327c0002331a0002332c0002333e0002
335000023360000233700002338200023394000233a6000233b8000233ca
0002347a00023526000235d600023682000236dc000237020002372a0002
376e000237a20002380400023858000238b00002391c00023970000239d2
00023a2000023a7200023ac200023b1000023b7e00023c0800023c680002
3ce000023d2c00023d9c00023de000023e4e00023e9400023eec00023f12
00023f5000023f8e00023fba00023fea0002401a00024076000240d00002
412200024194000241e20002424e00024296000242f20002433c000243a4
000243da0002441000024438000244600002448c000244c0000244ee0002
451600024574000245c60002461a00024684000246d60002473c00024786
000247da0002482c00024880000248b2000248e200024912000249420002
496e00024996000249c8000249fa00024a2600024a5a00024a8800024ab2
00024aea00024b2800024b6600024ba200024bee00024c2c00024c620002
4c9400024cc400024cf800024d2600024d4c00024d7400024d9a00024dd6
00024e0a00024e3a00024e6a00024e9a00024eca00024efe00024f320002
4f6200024f9200024fc200024ff20002502600025096000250ca0002513c
00025170000251e0000252140002528a0002534a0002544c000255860002
566c000257040002579c000259ae00025bba00025d2600025e7000026052
000261fa000262d6000263b00002645a000264f8000265d6000266aa0002
67e0000268f600026a0200026b1a00026bf200026c0200026cce00026dac
00026e8000026f4800026fbc0002700400027032000270580002716e0002
729600027350000274360002751800027614000276c6000277a80002787c
0002788c0002797200027a2800027b0e00027be400027c6c00027d4a0002
7e0200027f0a00027fde0002810a0002811a000281b4000282c4000283d8
000284660002852a00028650000287560002882800028838000289300002
8a2a00028b0e00028c0c00028d0000028dfc00028ec400028ed400028fa2
000290a4000291220002922c000292c60002938c0002943a0002950a0002
95ec000296b20002975800029830000298ee000299aa00029ab200029b8e
00029c5c00029d2000029e4200029f1400029f3c00029f7c0002a0080002
a0180002a05a0002a09c0002a0de0002a1040002a12c0002a1560002a17e
0002a1a80002a1d20002a1e20002a2160002a2620002a2c20002a2f20002
a33e0002a36e0002a39e0002a4d80002a6060002a6360002a6660002a696
0002a6c60002a6ec0002a7120002a7540002a7960002a7c60002a7f60002
a8240002a84a0002a8700002a8960002a8c60002a8f60002a9f20002aab6
0002aae60002ab160002ab4a0002ab7e0002abae0002abde0002ac120002
ac460002ac760002aca60002acda0002ad0e0002ad3e0002ad6e0002ada2
0002add60002ae060002ae360002ae6a0002ae9e0002aece0002aefe0002
af320002af660002af960002afc60002afec0002b0120002b1560002b358
0002b4280002b4f60002b5260002b5560002b6280002b7320002b82c0002
b8cc0002b95c0002b98c0002b9bc0002b9e20002ba080002ba3e0002ba8a
0002bb340002bb680002bbb40002bbe40002bc140002bc440002bc900002
bcc00002bcf00002bdfe0002bedc0002bfba0002c0bc0002c1620002c276
0002c3820002c4860002c5400002c6720002c6820002c6920002c7b20002
c88c0002c9420002cab00002cac00002cb960002cc6e0002cd8a0002ce60
0002cf540002d07e0002d1320002d1aa0002d2540002d33a0002d3e40002
d4620002d5680002d6780002d7960002d8e20002d9dc0002dad40002dbc4
0002dbd40002dce20002ddd40002dee60002df740002e00a0002e0e40002
e1820002e2460002e2bc0002e34a0002e42c0002e5160002e6760002e71c
0002e7e80002e8a00002e9dc0002ea9e0002eb700002ec8e0002ed700002
ee420002eeb00002efe60002f0700002f1120002f1d80002f2b00002f36a
0002f4900002f53e0002f5e20002f6820002f72e0002f8080002f8d40002
f99a0002faa40002fab40002fb860002fc580002fcaa0002fdc20002fea2
0002ff82000300ac00030238000303ca000305280003068a000308160003
099600030ab600030b4600030d0200030dba00030e9200030fa600031060
00031124000311ca000312b6000313a2000314d00003158c0003159c0003
15ac000315bc000315cc000315dc00031630000316840003172c000317e4
000317f40003180400031882000319000003192c0003193c0003194c0003
1978000319a8000319e400031a2200031a7400031aa600031afe00031b56
00031b8c00031bc400031c0c00031c3e00031c9800031d5200031e460003
1e9000031f8400032030000320e80003211e00032162000321a6000321ea
000322200003225200032294000322e20003233200032342000323ba0003
2440000324b00003251200032598000325f800032662000326d600032746
000327a40003284a000328e20003294e000329dc00032a3600032aa40003
2b4e00032bf400032c8a00032cfa00032d7c00032de000032e8c00032f4a
00032ff600033088000330e600033152000331a80003322a000332a80003
332e000333ba0003341400033480000334f00003355e000335ce00033652
000336e200033748000337c20003383e000338b60003395c000339f40003
3a8400033ae200033b8000033bfc00033c8e00033d3200033ddc00033e74
00033ed000033f2400033f8c00034032000340dc000341a60003424c0003
42ae0003430600034366000343f40003447a0003450800034568000345cc
000346360003469e000347060003477e000348060003489a000349060003
496e000349d200034a7e00034b3e00034bec00034c7a00034cd800034d44
00034db400034e5800034efe00034fc200035064000350c8000351580003
51ca00035262000352e00003535a000353c600035454000354b00003550e
000355940003561000035678000356dc000357300003579e000358060003
5884000358fa00035974000359f400035a5000035ab600035b1a00035bba
00035c5c00035d1a00035dca00035e2600035e9e00035efc00035f860003
601e000360ac0003611200036170000361fe000362700003630a0003639e
0003640e0003647e000364f600036554000365b40003662e000366880003
66e8000367420003679e000368060003684e00036880000368aa000368fc
0003693200036986000369fa00036a4c00036a9c00036ac800036b0a0003
6b5a00036be600036c3a00036c4c00036c5e00036c7000036c8200036cbe
00036cfa00036d3000036d6600036d9800036df400036e4600036e7c0003
6eb200036ef800036f2c00036f8200036fe000037032000370a2000370f8
0003716e000371d2000371fc00037236000372a2000372f0000373360003
7386000373d80003744a0003747a000374a4000374e4000375580003758a
000375b2000375fc0003764400037694000376ce0003770a000377860003
789800037906000379460003797c000379b400037a2800037a3a00037ab4
00037af400037b2e00037b6e00037bae00037bdc00037cca00037d860003
7e5e00037eb200037eee0003820e000382920003830400038342000384a0
0003856e000385e20003868200038746000387e4000388c8000389980003
8ace00038b8c00038c6c00038cec00038d9800038dd000038e0a00038e4c
00038f5e00039080000391500003917a000391ae000392b2000393c80003
956c0003964400039702000397ae0003988600039928000399ba00039aba
00039b4400039c6400039d2a00039e7600039fb20003a0700003a15c0003
a21a0003a32c0003a4340003a5300003a6420003a77a0003a85e0003a912
0003a9d40003aa940003abf60003acd40003ace40003acf40003ad040003
ad900003ae200003ae500003ae800003aeb00003aee00003b0120003b13e
0003b21a0003b3560003b45e0003b5600003b6560003b7aa0003b8fc0003
ba880003bbdc0003bd300003bee60003c0840003c22a0003c3ae0003c4a4
0003c5920003c6a00003c78e0003c8200003c8ba0003c8ee0003c9220003
ca560003cb880003cc740003cd500003ceee0003d0600003d0c00003d0f0
0003d1200003d1dc0003d2840003d3a80003d4080003d4700003d4c20003
d5180003d6e20003d8f20003da2a0003db5e0003dc4a0003dd320003de2e
0003df420003e0180003e0e80003e21e0003e33c0003e4c20003e6160003
e73a0003e8540003e9120003e9c80003eac60003ebb60003ecf20003edf2
0003eee40003efc60003f05c0003f18c0003f2540003f2840003f35c0003
f4480003f52a0003f60a0003f7100003f8160003f8260003f8560003f886
0003f9a00003fabc0003fb880003fc580003fd420003fe260003fee40003
ff9e0004007a0004014200040278000403d0000404220004045200040482
000404b6000404ea000404fa0004050a0004053a0004056a0004059e0004
05d2000406060004063a0004066e000406a20004076c0004077c000407ac
000407dc000408100004084400040878000408ac000408e0000409140004
09480004097c000409ac000409dc00040a1000040a4400040a7800040aac
00040ae000040b1400040b4800040b7c00040c2200040c3200040d3e0004
0e5400040f8000041094000411a0000412ae000413b6000414c0000415c4
000416c40004177a00041838000418f600041a8e00041ae200041b740004
1bde00041c4000041cc000041d2000041d5200041e4400041eaa00041ee6
00041f6400041fcc00042032000420e2000422aa0004234a000423a20004
23d00004240c000424780004252e000425a000042608000426a0000426f6
0004273200042762000427c800042892000428e8000429220004296e0004
29bc00042a4a00042aee00042b3c00042b9e00042c0a00042c3200042c5a
00042c8a00042cb800042cde00042d0400042d2a00042d5000042d920004
2dd400042e0400042e3400042e5a00042e8000042ea600042ecc00042ef2
00042f1800042f3e00042f6400042f9800042fe400043018000430640004
308a000430b0000430d6000430fc0004313e00043180000431b0000431e0
000432100004324000043270000432a0000432c6000432ec000433200004
3354000433780004339c000433c2000433e80004340e000434340004346a
000434bc000434ec0004351c00043542000435680004358e000435b40004
35da000436000004364200043684000436aa000436d0000436f60004371c
0004374c0004377c000437ac000437dc0004380200043828000438580004
3888000438ae000438d4000438fa00043920000439460004396c000439a0
000439ec00043a2200043a7200043aa600043af200043b2600043b720004
3ba200043bd200043c0200043c3200043c6200043c9000043cb600043cdc
00043d1e00043d6000043d8600043dac00043ddc00043e0c00043e320004
3e5800043e8c00043ed800043f0c00043f5800043f9a00043fdc0004400c
0004403c0004406200044088000440ae000440d4000440fa000441200004
41480004417000044196000441bc000441e2000442080004423c00044288
000442be0004430e0004433e0004436e00044394000443ba000443ea0004
441a000444400004446600044496000444c6000444fa0004452e0004455e
0004458e000445be000445ee000446140004463a00044660000446860004
46ac000446e0000447140004474800044778000447a8000447d800044808
0004483c00044870000448a4000448d80004490c00044940000449680004
499a000449c4000449ee00044a1800044a4200044a6c00044a9600044ac6
00044af600044b2a00044b5e00044b9200044bc600044bf000044c1a0004
4c4400044c6e00044c9800044cc200044cf200044d2200044d5600044d8a
00044dbe00044df200044e2600044e5a00044e8400044eae00044ed80004
4f0200044f2c00044f5600044f8000044faa00044fd80004500600045038
0004506a0004509c000450ce00045100000451320004515c000451860004
51b0000451da000452040004522e0004525800045282000452b2000452e2
000453160004534a0004537e000453b2000453d8000453fe000454260004
544e00045478000454a2000454d200045502000455360004556a0004559e
000455d2000456060004563a000456640004568c000456b6000456e00004
57100004574000045774000457a8000457dc000458100004584400045878
0004589e000458c4000458ec000459140004593e00045968000459900004
59b8000459e800045a1800045a4800045a7800045aa800045ad800045b06
00045b3400045b6400045b9400045bc400045bf400045c2400045c540004
5c9600045cd800045d1c00045d6000045da400045de800045e2c00045e70
00045eaa00045eee00045f2a00045f6600045fa200045fde0004601a0004
605600046096000460d6000461180004615a0004619c000461de00046220
000462620004629e000462da00046316000463520004638e000463ca0004
64060004644200046484000464c60004650a0004654e00046592000465d6
0004661a0004665e00046696000466ce00046708000467420004677e0004
67ba000467f40004682e0004685e0004688e000468d0000468f600046938
00046968000469aa000469da00046a0a00046a3200046a5a00046a800004
6ad600046b1800046b6e00046be200046c9a00046cda00046cfe00046d3e
00046d6e00046dae00046dd800046e0200046e2c00046e5600046e7c0004
6ef400046f6e000470260004705400047082000470ce0004711a00047148
00047194000471c4000471f40004721e00047248000472bc000473320004
73e6000474160004744600047494000474e2000475120004754200047572
000475c0000475f0000476200004764a000476740004769e000477120004
778c000477c2000478040004782a0004786c0004789c000478de00047906
0004792c000479540004797c000479a2000479da00047a2c00047b160004
7cbe00047dd800047f34000480cc000480f2000482e0000483f6000484fc
000486d20004883a00048a5000048a9600048ae200048b3a00048b920004
8c1400048c8800048dd200048f0200049054000491200004924c00049352
0004944e0004957c000495ce0004962000049678000496ce000497400004
9776000497c40004982200049896000498ec0004991e0004994e0004997e
000499ae000499e800049a1a00049a6e00049ac200049b1600049ba20004
9c1400049c6a00049cc000049d4a00049d9e00049e0a00049e3800049e66
00049e7600049e8600049f2400049ff80004a13c0004a2380004a2480004
a2d40004a3a80004a4240004a4340004a4aa0004a5380004a5480004a5f6
0004a6060004a69e0004a6ae0004a6be0004a7540004a7ec0004a8d80004
a9e60004aad80004ab480004abba0004ac4c0004ac5c0004ad260004ad8a
0004ad9a0004ae5a0004af640004b0980004b0a80004b0b80004b0c80004
b1720004b25e0004b32a0004b37c0004b38c0004b39c0004b3ac0004b4b6
0004b4c60004b56e0004b6580004b73e0004b8520004b9020004b9900004
ba140004baf60004bb9c0004bbe60004bc760004bd460004bd9c0004bec0
0004bf920004c0660004c1360004c21a0004c2c60004c3be0004c4340004
c4ec0004c5f00004c74e0004c88e0004c9680004cb100004cbf40004ccd2
0004cda00004ce660004cf460004d03e0004d18c0004d1fe0004d2d40004
d40a0004d5000004d5a00004d6440004d6ae0004d7160004d7e40004d8c4
0004d9880004da420004db640004dbe40004dcac0004ddbc0004de6a0004
df5c0004e09e0004e1440004e1ac0004e2560004e30a0004e37e0004e48a
0004e52a0004e5f80004e7360004e7d40004e8e20004e9460004e9fe0004
ea800004eb440004ebfe0004ec860004ed760004edba0004eeec0004efa8
0004f0820004f0bc0004f0e20004f12a0004f13a0004f14a0004f15a0004
f16a0004f17a0004f18a0004f19a0004f1aa0004f1ba0004f1ca0004f1da
0004f1da0004f3700004f3800004f48c0004f5c40004f7160004f8a60004
fa240004fb7e0004fcb00004fdf20004fe9c0004ffa6000500ec000501c0
0005028a000502c40005037c000504820005051a0005058c000506920005
07440005082600050916000509b400050b1c00050b7200050bc600050bfc
00050c8600050cf200050e66000510040005116600051382000515040005
165e000517ac000518b800051a0200051b6e00051c7000051d8c00051e42
00051f320005213c000521be000522400005235400052464000525780005
26a8000527fa0005292e00052ad200052c1400052cc600052e4c00052f82
000530b8000531b6000532fe0005343c0005351000053636000537000005
384c000539a800053af000053c1000053d3800053e6a00053f9800054070
000541820005426c0005439e000544c6000545c600054664000547ba0005
491200054a0a00054af200054bc000054d0e00054de600054eaa00054efa
00054f4a00054fe4000550c60005513c000551c400055236000553a80005
54ee000555f4000556f0000557be0005588c000559ac00055b1000055bc0
00055cc800055df000055ed400055f9600056074000560fa000561a60005
6284000563b40005648000056556000565d20005665a00056758000567be
00056866000569c000056a8a00056b2600056bd000056c8e00056e0e0005
6f3e000570a0000571b6000572220005726c000572b6000573000005734a
000573ac0005740e00057470000574d20005751a00057562000575aa0005
75f200057652000576b20005771200057772000577bc0005780600057850
0005789a000578f40005794e000579a800057a0200057a7e00057afa0005
7b7200057bea00057c6800057ce600057d6000057dda00057e9400057fc2
000580f6000581060005824a000583ac00058484000585760005866c0005
87720005887c0005895800058a5800058bb400058c5a00058c8600058cc6
00058cd600058dc800058ec800058fc0000590b60005919a000592900005
936e0005937e0005945e0005953400059570000595ae000595ea00059628
00059682000596da00059764000597ca0005985600059a4000059ab20005
9b5800059c2800059ce600059dce00059ec600059fec0005a1a40005a2ce
0005a3aa0005a4980005a59a0005a6980005a7320005a7c40005a9100005
a97c0005a9e60005aacc0005ab0a0005ab680005aba60005abd80005ac1c
0005ac5e0005ac8e0005ad940005ae8c0005af740005afee0005b05c0005
b1040005b1f00005b28a0005b3520005b4260005b4800005b57c0005b652
0005b6c80005b6d80005b6e80005b6f80005b7080005b8100005b8220005
b8ee0005b9a00005bada0005bc4e0005bca40005bcf00005bd300005bd70
0005bdc00005be100005be720005bed40005bf380005bf800005c00e0005
c1300005c1e00005c2660005c3200005c33e0005c3f00005c40e0005c41e
0005c43c0005c44c0005c46c0005c47c0005c48c0005c49c0005c4ac0005
c4bc0005c4cc0005c4dc0005c4ec0005c4fc0005c50c0005c67a0005c766
0005c84a0005c9880005ca640005caea0005cba60005ccc20005cd960005
ce0e0005cee80005cef80005d0320005d0c40005d1ec0005d2b20005d37c
0005d38c0005d4200005d4300005d50e0005d61c0005d6f00005d7960005
d82e0005d8b20005d99a0005da420005da8c0005db240005dbf40005dc5c
0005dd860005de640005df0c0005dfc40005e0d80005e1e20005e2fa0005
e3720005e4400005e5040005e5fe0005e6c00005e77a0005e7fe0005e900
0005ea200005ead40005ec1a0005ecd60005edb00005eed00005ef000005
ef300005ef600005ef900005efc40005eff60005f01c0005f04c0005f07c
0005f0ac0005f0e00005f10e0005f13c0005f16a0005f19c0005f1cc0005
f1fc0005f22c0005f25c0005f28c0005f2c00005f2f00005f3200005f350
0005f3840005f3b40005f3e40005f4140005f43a0005f46a0005f49a0005
f4ca0005f4fa0005f50a0005f53a0005f56a0005f59a0005f5c20005f5f2
0005f6220005f6480005f6780005f6a80005f7aa0005f7d80005f8060005
f8340005f8580005f8860005f8ae0005f8de0005f9040005f9320005f958
0005f9840005f9b00005f9e00005fa060005fa360005fb2a0005fb5a0005
fb8a0005fbbe0005fbee0005fc140005fc440005fc740005fca40005fcca
0005fcfa0005fd1e0005fd440005fd740005fe2c0005fe5c0005fe8c0005
febc0005fef00005ff240005ff4a0005ff7a0005ffaa0005ffda0006000e
0006003e00060072000600a2000600d200060102000601320006017a0006
01aa000601da000601ea000601fa00060256000603180006032800060338
00060348000604120006042200060432000604f200060502000605120006
0598000605a80006062400060634000606f2000607020006071200060824
000608340006094a00060a2400060a5400060a8400060ab400060ae20006
0b1200060b4200060b7200060ba400060bd800060c0c00060cf000060d20
00060df200060e0200060e1200060e4400060e5400060f6c000610680006
113e0006116e0006119e00061250000612600006130e0006131e0006132e
00061420000614300006164800061746000617f0000618200006193c0006
19fa00061a0a00061a1a00061a2a00061a3a00061a4a00061a5a00061a6a
00061b2400061c1600061c2600061cd200061d9c00061e4e00061f2e0006
1fe2000620ae000621520006221e0006231c00062428000624a6000624c4
000624e0000624fc000625180006253600062552000625700006258c0006
25ac000625ca000625e800062606000626240006265400062684000626b4
000626e4000627180006274c0006277c000627ac000627d20006281c0006
282c0006285c0006288c000628bc000628f0000629200006295000062980
000629a6000629d6000629e600062a1a00062a4a00062a7a00062aa00006
2ad000062b0000062b3000062b6400062b9400062bc400062bf400062c28
00062c5c00062c8200062cb200062ce200062d1200062d4600062d760006
2da600062dca00062dfa00062e0a00062e3a00062e6e00062e7e00062eb2
00062ee200062f0600062f3200062f580006304a0006307a000630aa0006
30da0006310e0006313e0006316e00063192000631c2000631e800063218
0006324800063278000632a8000632dc0006331000063340000633700006
33960006341e000634440006347400063498000634c4000634ea000635dc
000636000006362400063650000637380006376800063798000637cc0006
37fc0006396000063986000639b6000639e600063a0400063a2000063a3c
00063a5c00063ac800063b6a00063c2e00063cde00063cee00063dca0006
3ec000063fa8000640d600064310000644260006452a0006463a0006477c
000648aa00064a0a00064b1e00064c5800064db800064ef40006504c0006
518e00065234000652d0000653b4000654a8000655ce00065698000657b0
0006583e00065916000659ee00065adc00065bc600065ca000065dda0006
5e7c00065f380006605000066114000661f800066276000662f200066340
000664920006655000066574000666b2000100000b8900f2003c006c0005
00020010002f005600000541025f000400020000005303ea000000030000
0000006a00000000000300000001000a006a0000000300000002001600ec
0000000300000003004c00ce0000000300000004002200e0000000030000
00050018011a00000003000000060024013200000003000000070064006a
00000003000000080030000e0000000300000009008a0156000000030000
000d029801e00001000000000000003504780001000000000001000504ad
0001000000000002000b04ed0001000000000003002604de000100000000
0004001104e70001000000000005000c0504000100000000000600120510
0001000000000007003104ad00010000000000080018047f000100000000
000900450522000100000000000d014c05670003000104030002001e06bf
0003000104030004002a06b30003000104050002001a06e9000300010405
0004002606dd00030001040600020014070f000300010406000400200703
00030001040700020016072f000300010407000400220723000300010408
0002001a07510003000104080004002607450003000104090000006a0000
0003000104090001000a006a0003000104090002001600ec000300010409
0003004c00ce0003000104090004002200e000030001040900050018011a
00030001040900060024013200030001040900070062076b000300010409
00080030000e0003000104090009008a0156000300010409000d029801e0
00030001040a0002001e07d900030001040a0004002a07cd00030001040b
00020024080300030001040b0004003007f700030001040c0002001a0833
00030001040c00040026082700030001040e0002001a085900030001040e
00040026084d00030001041000020022087f0003000104100004002e0873
0003000104130002001608ad0003000104130004002208a1000300010414
0002001c08cf0003000104140004002808c30003000104150002002408f7
0003000104150004003008eb0003000104160002001e0927000300010416
0004002a091b0003000104190002002209510003000104190004002e0945
00030001041b0002001a097f00030001041b00040026097300030001041d
0002001409a500030001041d00040020099900030001041f0002001809c5
00030001041f0004002409b90003000104240002001c09e9000300010424
0004002809dd00030001042a000200180a1100030001042a000400240a05
00030001042d000200160a3500030001042d000400220a2900030001080a
0002001e07d900030001080a0004002a07cd0003000108160002001e0927
0003000108160004002a091b000300010c0a0002001e07d9000300010c0a
0004002a07cd000300010c0c0002001a0833000300010c0c000400260827
00a90020003200300031003200200054006800650020004d006f006e006f
007400790070006500200043006f00720070006f0072006100740069006f
006e002e00200041006c006c002000520069006700680074007300200052
0065007300650072007600650064002e0041007200690061006c00200020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e004d006f
006e006f0074007900700065003a0041007200690061006c00200042006f
006c00640020004900740061006c0069006300200028004d006900630072
006f0073006f00660074002900560065007200730069006f006e00200036
002e003800300041007200690061006c002d0042006f006c006400490074
0061006c00690063004d0054004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d00200052006f00620069006e0020004e0069
00630068006f006c00610073002c00200050006100740072006900630069
00610020005300610075006e006400650072007300200031003900380032
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002ea9203230313220546865204d6f6e6f7479706520436f72706f72
6174696f6e2e20416c6c205269676874732052657365727665642e417269
616c20697320612074726164656d61726b206f6620546865204d6f6e6f74
79706520436f72706f726174696f6e2e4d6f6e6f747970653a417269616c
20426f6c64204974616c696320284d6963726f736f66742956657273696f
6e20362e3830417269616c2d426f6c644974616c69634d544d6f6e6f7479
706520547970652044726177696e67204f6666696365202d20526f62696e
204e6963686f6c61732c205061747269636961205361756e646572732031
393832596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e20596f75206d6179206f6e6c792028692920656d62656420
7468697320666f6e7420696e20636f6e74656e74206173207065726d6974
7465642062792074686520656d62656464696e6720726573747269637469
6f6e7320696e636c7564656420696e207468697320666f6e743b20616e64
20286969292074656d706f726172696c7920646f776e6c6f616420746869
7320666f6e7420746f2061207072696e746572206f72206f74686572206f
75747075742064657669636520746f2068656c70207072696e7420636f6e
74656e742e0041007200690061006c0020004e0065006700720065007400
61002000630075007200730069007600610041007200690061006c002000
740075010d006e00e90020006b00750072007a00ed007600610041007200
690061006c00200066006500640020006b00750072007300690076004100
7200690061006c002000460065007400740020004b007500720073006900
760041007200690061006c0020038803bd03c403bf03bd03b1002003a003
bb03ac03b303b903b10041007200690061006c0020006900730020006100
2000740072006100640065006d00610072006b0020006f00660020005400
6800650020004d006f006e006f007400790070006500200043006f007200
70006f0072006100740069006f006e002e0041007200690061006c002000
4e0065006700720069007400610020004300750072007300690076006100
41007200690061006c0020004c0069006800610076006f00690074007500
20004b00750072007300690076006f00690041007200690061006c002000
470072006100730020004900740061006c00690071007500650041007200
690061006c0020004600e9006c006b00f6007600e9007200200064015100
6c00740041007200690061006c0020004700720061007300730065007400
74006f00200043006f0072007300690076006f0041007200690061006c00
200056006500740020004300750072007300690065006600410072006900
61006c002000480061006c00760066006500740020004b00750072007300
6900760041007200690061006c00200050006f0067007200750062006900
6f006e00610020006b007500720073007900770061004100720069006100
6c0020004e00650067007200690074006f00200049007400e1006c006900
63006f0041007200690061006c0020041f043e043b044304360438044004
3d044b04390020041a044304400441043804320041007200690061006c00
2000540075010d006e00e10020006b00750072007a00ed00760061004100
7200690061006c00200046006500740020004b0075007200730069007600
41007200690061006c0020004b0061006c0131006e002001300074006100
6c0069006b0041007200690061006c0020004b007200650070006b006f00
200070006f016100650076006e006f0041007200690061006c0020006e00
670068006900ea006e00670020011100e20323006d004100720069006100
6c0020004c006f00640069002000650074007a0061006e006100000000>
<410c0054035a035a035a0236001d001f03590358003c001f0358b3061d1f
30bb035100010040034fb2393340b8034fb310153240b80350b30c123240
b8034db32f333240b8034db23e3340b8034db345493240b8034db2503340
b8034db25a3340b8034db2653380b8034db31b1b3240b8034db312143240
b8034db30b0d320f4115034d007f034d00ef034d0003003f034d004f034d
008f034d00ff034d0004000f034d007f034d0002034cb301221f60bd034b
007f034b000200400349b34343327fbf0349009f034900df034900030040
0349b330333240b80349b335353240b80349b32f313240b80349b3272732
40b80349b32225320f410c0349003f0349007f034900cf034900df034900
0500400349b30913322f4121034a007f034a0002008f034a00bf034a00cf
034a00df034a00ef034a0005000f034a002f034a004f034a0060034a009f
034a0005000f034a00df034a00020040034ab3293a3240b8034ab3121432
40b8034ab30b10325041100348007f0348009f03480003009f0348000100
df034800ef0348000200400348b309103212b9ffc002dcb2404132b9ffc0
02dcb2393c32b9ffc002deb33c4132d4411902de0001003002dc004002dc
005002dc006002dc00d002dc00e002dc00f002dc0007000002dc009002dc
00a002dc00b002dcb2043790412202cb0001009002c80001004002cb0001
004002c80001003002cb0001003002c80001002002cb0001002002c80001
004002a5000102a50076009002a400a002a4000202a440255fe006e00702
bf06bf0702af06af07029f069f07024f064f07020f060f0702af06af0702
0f415d0342002f0342004f0342009f03420004000f0342003f0342005f03
4200af034200c0034200ff03420006002f0236007f02360002000f023600
1f0236002f0236003f0236004f0236008f0236009f023600bf0236000800
af02360001000f0236002f0236003f0236005f0236007f023600ff023600
0600100235007f02350002000f0235002f023500d002350003007f023500
0100100235003f0235004f02350003034a034a0342034202370237023602
3602350235ffc002ccb2213432b9ffc002cbb2213432b9ffc002cab22134
32b9ffc002c9b2213432b9ffc002c8b2213432b8ffc0b36d1a3c32b8ffc0
b3e91a3532b9ffc0015bb21a3532b8ffc0b37c1a3532b8ffc0b3761a3532
b8ffc0b3601a3532b8ffc0b32e1a3532b8ffc0b22a3433b8ffc0b22a3333
b8ffc0b22a3233b8ffc0b22a3133b8ffc0b22a3033b8ffc0b22a2f33b8ff
c0b22a2a33b8ffc0b22a2933b8ffc0b22a2833b8ffc0b22a2133b8ffc0b2
2a1733b8ffc0b22a1633b8ffc0b22a1533b8ffc0b22a1433b8ffc0b22a13
33b8ffc0b22a1233b8ffc0b22a0d33b8ffc0b22a0c33b8ffc0b22a0b33b8
ffc0b32a1a3532b8ffc0b2273433b8ffc0b2273333b8ffc0b2273233b8ff
c0b2273133b8ffc0b2273033b8ffc0b2272f33b8ffc0b2272a33b8ffc0b2
272933b8ffc0b2272833b8ffc0b2272133b8ffc0b2271733b8ffc0b22716
33b8ffc0b2271533b8ffc0b2271433b8ffc0b2271333b8ffc0b2271233b8
ffc0b2270d33b8ffc0b2270c33b8ffc0b2270b33b8ffc0b3271a3532b8ff
c0b3211a3532b802ccb224351fb802cbb224351fb802cab224351fb802c9
b224351fb802c8400b24351f6d243c1fe924351fb8015b401f24351f7c24
351f7624351f6024351f2e24351f2a24351f2724351f2124351fb8033fb2
8e291fb8033eb320231f5f4109033d006f033d007f033d008f033d000403
39b320211f1f41150338002f0338003f0338004f03380004009f033800af
033800bf03380003002f0338003f033800020335b624351f8f3f3c1fb801
19b6243c1ff724351fb801b3b224351fb801abb224351fb80156b224351f
b80155b224351fb8011b404e24351ffa24351fea24351fd224351f772435
1f6e24351f5724351f4c24351f4324351f3d24351f3524351f37010012e0
01f001021270018001900103010100090102000800171700000012110840
bb0216000000090289b269131fb801b5b228671f411501b400280401001f
01b3015f0401001f01b000690401001f01ab00270125001f01aa00270156
001f01a2b22a9e1fb8019fb22a321fb8019db22a291fb80165b2281d1fb8
0164b228201fb80163b228301fb80161b228411fb8015bb2279e1f410901
5700270801001f0156002a019a001f0155b22a891fb80154b22a891fb801
53b22a431fb8011fb228201fb8011eb228931f410b011d006902ab001f01
1b002702ab001f0119002a02abb21ffa27b80401b21ff927b802abb61ff7
2a4f1fea2ab80801b61fe92a791fd528b80201400f1fd42ecd1fd221cd1f
c3282f1fc269b802ab400b1fc069cd1fbe2a4f1fb124b80401b21f9a2ab8
0156400b1f992a381f912a351f7c2eb80401400b1f772ecd1f762aab1f70
28b802abb21f6f1fb80401b21f6e21b8019a400b1f6d27931f652a811f60
27b8019ab61f5f2a2a1f572eb80125b21f5269b80201b21f4c2eb80156b6
1f4b21cd1f4969b802ab400b1f472a2b1f4469cd1f432ab80801b21f4128
b80401b21f4027b80101401b1f3d21e41f3b2a381f372ebb1f352a3b1f31
2ee41f232a451f2269b80156b71f550d090d093790b8012340360790dd07
907207905507903407902f07902b07902607902507901e07901d07140812
0810080e080c080a080808060804080208000814b8ffe0402c0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a0012b013034b024b5342b0382b4bb807ff52b0372b4bb0
08505b58b101018e59b0382b4bb0c063004b6220b0f65323b8010a515ab0
05234201b0124b004b544218b00288b801005458b80119b101018e851bb0
124358b900010119858d1bb900010119858d59594358ba009f0216000173
590016763f183f123e113946443e113946443e113946443e113946443e11
394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b
2b2b2b2b4b5079b9001f01a8b3071f36072b2b4b5379b9009001a8b30790
36072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb08953205c
58b9021802164544b90217021645445958b904b30218455258b9021804b3
4459594bb8019a53205c58b9002002184544b90024021845445958b90e08
0020455258b900200e084459594bb802ab53205c58b9001f02174544b900
28021745445958b918a5001f455258b9001f18a54459594bb8040153205c
58b169204544b1202045445958b923000069455258b9006923004459594b
b8040153205c58b9015f00244544b1242445445958b923a0015f455258b9
015f23a04459594bb02b53205c58b127274544b12e2745445958b9011c00
27455258b90027011c4459594bb03553205c58b127274544b12127454459
58b9015f0027455258b90027015f4459594bb08c53205c58b127274544b1
2a2745445958b903aa0027455258b9002703aa4459592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
654245695342014b5058b108004259435c58b1080042591610703eb01243
58b90d193ea51bba00d203eb000b2b59b00a2342b00b2342003f3f182b10
3c012f5d435c58b27f01015d595d435c58b2ef01015d59060cb0062342b0
072342b0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342
b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b01243
58b9187e3b211bba01a80400000b2b59b0102342b0112342002b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373742b732b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b0018456944456944456944184569441845694473737475737374757374
73747474747473454473454474004bb02a534bb038515a58b1070745b040
604459004bb02e534bb038515a58b1030345b0406044b1090945b0406144
5973737373737373732b7475742b2b2b435c584031402a3433402a333340
2a3233402a3133402a3033402a2f33402734334027333340273233402731
334027303340272f33a0410a02cb000100a002c80001009f02cb0001009f
02c8403301402a2a33402a293340272a3340272933402a12334027123340
2a283340272833402a2133402a1d353240271d353240272133002b2b2b2b
2b2b2b2b2b2b2b2b737373732b2b2b2b2b2b2b2b2b2b2b2b59002b737475
2b2b2b737474752b732b2b2b2b2b752b0173002b7374752b2b2b2b2b2b2b
2b2b2b2b2b74002b2b2b00184569442b00>
[16313 16145 15981 14961 16273 15769 15989 16121 16317 15973 16277 16069 16349
16369 16341 15225 16373 16301 16241 16125 16085 15833 15653 16181 15557 18711
] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3362 15 <00010015fec201b30115000a006040298b038b07800c030a08018a030108
070906060502010a06bd0509058700490a0a010901000910090209b80151
40100a01490aa8200030000200ae0b4673182b10f65de4ed10e45d71003f
ede43c10ed11123912391112393931305d01715d13210706060737363637
239201213029b5901c484f13840115e5c6a5038510535600>Arial-BoldItalicMT AddT42Char 
2 3756 19 <00020084ffe7049205c0000e0020004a40110a040806040b060de816f816
062902011bb8011cb2050512b8011c40140c0d18690008100802081a220f
69001921bc97182b4e10f44ded4e10f65d4ded003fed3fed3130005d015d
133437120033321215140200232202251416333237361336353426232207
060306844b5c0120b0b2e5a7fee4b2b2e7011a4c3c503e5340334d3c4c3b
573f3601dddde30115010efefef6e1fe0bfef50102ba76604a630123e787
6e61496afef5e700>Arial-BoldItalicMT AddT42Char 
2 3944 20 <000100f30000041605c300090095401b4b004d095f005f015f09052c0339
03360536065603f90906040505b8015fb70607140606070700ba026e0001
0317400b0303040505060c07061003410b01a2000401660007028d000501
b00006027500010271401110000100003f004f0060000400190a0617b803
14b1f3182b2b4e10f45d714de4f6edf4fded2b103c003f3c3f3c10f4fd39
87052e2b7d10c43130015d005d13132437330121130606f3360173cbaffe
cbfedfd55aeb034a0100a2d7fa3d03f83a60>Arial-BoldItalicMT AddT42Char 
2 5388 24 <00010082ffe7049f05a600210102404313400b3914400b392f0f2f103c0f
3b104d0f4d105e0f5a106f0ee408f615f6160c200120042810281420203d
103f113f14971098119a14e811e312e51af5150f141515b801af40161011
14101011100f150c1800500160017001e0010401ba01ae0006011cb51f0d
6f0f010fb8028fb3e00c010cb8015a4010181320143f144f14bf14cf14df
140614b8015eb312110409b80289b21bb612b80271b5001310130213410c
01970023001402d900150224000f01aa0011028d001002d9400b01690f00
01001922bc97182b4e10f4714dedf4e4edfde410f65de4f4ed003f3cfd5d
3c2ffd5de45d3ffdf65d391112391139870e2e2b057d10c43130015d005d
2b2b13250615141633323635342623220607271321032107363633321615
140204232226820117015b4966a75e4e386931ecdf02e136fe19432a5429
a8d897fef493bbf101a419140a6666c3ac666834351202edfefae21313e2
be98fed99ef2>Arial-BoldItalicMT AddT42Char 
2 6370 27 <00030087ffe6048905c000190025003100c5403f3a0d3c0e5612a70cd62b
052b0d201220133d05331236134812550e5912760e860e88249808980cb9
24e822f822110d00010d001d2f0d0a20001a03e02f012fb8015a400a301d
011d1d23ef290129b8015ab5140de0230123b8015a401e07052c696f1001
10812069000a100a021f0a010a1a331a69200330030203ba026f00260289
400b0017101702171932bcf3182b4e10f45d4dedf45ded4e10f6715d4ded
f45ded003fed5d3ffd5d11392f5ded5d0111123911123900111239393130
01715d005d01262635343636333216151406071616151407062122263534
3613141633323635342623220603141633323635342623220601b84d4d6c
d788c4dc7c7c5a596a9afef5c2eca4fa54434d7556434f71805a486f795d
485a8b03273385515ec270cc9c6ea336379d65a688c4e5b193e801264555
754e475874fd06525ec4734a5fa6>Arial-BoldItalicMT AddT42Char 
2 7514 32 <000200a5017404a60432000300070080b6073f044f040204bb0250000600
050327b6033f004f000200b80250401802100120010220014001bf01d001
f0010501070606030302b8ffc0b3090a3402b802fdb5090405050100b8ff
c0b313193400b8ffc0b3090a3400b802fcb308464a182b10f62b2b3c3c10
3c10f62b3c103c103c002f5d723cfd5d3cf63cfd5d3c3130131121110111
2111a50401fbff040103300102fefefe440103fefd00>Arial-BoldItalicMT AddT42Char 
2 9026 37 <00030052000005ae05ba0012001e002800fd403e202a01561001a801a71f
a02ac02a04640c9706a700d02a045713571f600bf02a042b0b270c302a03
13281f1e0b14270b08181e1f1f1f0001140000011413b802c8401727cf28
01282028df28022f284f28b028c02804281f1d1eb802c8b4020102201fb8
02c8402d12000801001018282008012f086f080208cb2428402a01000e10
0e200e300e600e9f0ebf0e070e5e702a012a1eba0292001f02244011c000
d0000230004000500003003c290017ba02aa025700182b2b10f65d71fde4
105df65d72edf45d71ed2b103c003f3cfd3c3f3cfd3c11395d712f713cfd
3c87052e2b7d10c4011112390011123907053c3c3130015d5d5d5d005d01
7133012132171e0215140607161615140604230333323636353426272623
230321323636353426232152013301f5a3416c964e888e717f96fef8e5cf
e69b8844403b217eeace0123b77d4b6c7efe9805ba0a0f5a965b7ab32e1f
9f6484ed68036a2c643938480c06fc272f6c3c495f00>Arial-BoldItalicMT AddT42Char 
2 12338 48 <000100530000070705ba000c025fb10602435458b6000701010b030bb802
81b30a060203b80281401105040a040e0d0c20090d340220090d3407b8ff
d04010091934020c070305040805020b010408003f3c3c3f3c111217392b
2b2b01111239392f33fd33332fed1112392f333331301b40e20e06090709
0845004503460a6e08760685008a018406f0090c300e400ed00e030f0709
0c27022c0c4a07460c7f079007bf0c0919091a0c1f0e26002a092c0c200e
07030b030ce600ea08e80cf00e0606000b010f02080509070608030a07c5
00cf08c70ac60bc80c05970a9b0cb400bb08b509b70c06880a8c0c9d069f
079f089909067b097c0c8f068d078f08890906680c600e79007f067f077b
08064908470c5809580c6f066c07063909380c4f064c07040c0266080707
21000c1400000c090a0a220b0c140b0b0c05040422030214030302020103
0c0b0203100f071f070207bd02840000000c028200090244b40e17171a0a
b8028140285f0bdf0b027f0bff0b020f0b01ef0bff0b029f0b018f0b017f
0b010f0b6f0b020f0b1f0b4f0b030bba01b2000001b240163f015f01df01
030f017f01020b011f018f01ff010401bd01b20003000502440003028140
2f8f04bf04ff04033004400450046f047f049f040604190d0b1703170d0d
040c0c0d02080205020b0801080408387a182b003f3f3f3f3f1112392f12
392f2b2b4e10f45d714dede410f65d7172fef65d5d5d5d5d5d717172fd4e
456544e64df4ed10ed5d2b103c103c01111239872e2b7d10c4872e182b7d
10c487042e182b057d10c4313001762f192f014bb00b5158b30e090d0410
3c103c59015d5d5d5d5d5d5d5d5d5d005d01727159212103032101211301
21012101039ffee235e9fef0013201ae2d01f401b3fecdfeed012104c9fb
3705bafbfd0403fa4604c000>Arial-BoldItalicMT AddT42Char 
2 14464 53 <0002005a000005ee05ba00160021013d407b08020605040916051f0f1f10
1d1107120a100c110c132a1ab309052a0d261a3b0b3d0d3811391a4f0a49
0d4910570057015702570c572183098c118f129a0d9910a70db90ab90bb9
0db910c90bcb0dc910db0dda10d911e50aef13e91af910fb1a2316172100
2100001f0102140101021820173017401790170417b8ffc0b2133917b802
cab5151616012021b802c8400d0302020e0f0f0001080201100fb8025940
1fb00e010e981c282007c007d0070300071007bf070307cb402301202301
2321bc015d00000259000202444011c001d0010230014001500103013c22
0117b802aab164182b2b10f65d71e4fde4107172f45d71edf45ded2b103c
003f3c3c103c3f3cfd3c11392f3cfd2b5d3c87052e2b7d10c4073c3c3130
015d0171435c5840101a401239194012391840123917401239002b2b2b2b
59015d212101213216161514060716171613212603262726232337333236
363534272623210188fed20133028ba8bb73e0e33a33657cfebc27723e46
2b6b7b2ea0f39f5a412885feb405ba45b883bbf31d3455acfec67c01078e
311ddc3a7c4450281800>Arial-BoldItalicMT AddT42Char 
2 14894 54 <0001007effe7056905d3002a0171407d42074a1049114d1b690d68106d13
6f1d632990019f089f169f17901c911eaa1bb91bca0cc011c81bc2281500
2c01460c49214b23034609400b4e1e4f1f4f20802c06061f190a171e151f
36224d0b4f0d461e401f43214022a41ec813c525da1eda20100828002410
240224f51628101501151a2c1c286f0f019f0f010fb8022c400f01280000
100020000300192bce32182b4e10f45d4dedf45d71ed4e10f65d4dedf45d
ed00b10602435458b9000cffe040091a1d3421201a1d340cb8ffe0401a13
16342120131634451f4521550c5a2104211f27190b0c271216ba01590019
02cbb2120301ba0159000502cbb12709003ffde43ffdf411123939111239
395d2b2b2b2b1bb7000501156f160116b80159400faf19bf19cf19031f19
2f193f190319b8ffc0b2133919b802cbb51203cf010101b8015940130540
1339a005b005c005031005200530050305b802cbb127093ffd715d2be45d
3ffd2b715df45d39111239593130005d0171007101725d13251617163332
363534272624262635342433200417052626232206151417161716171615
14002122242682011f062942b294843626feab9d5a010cfe0102011b0efe
df0b827f7d6b3131a8fd4567fecdfeeebdfeeb7201db0f89304e6a4b412d
2194639e6ab9f4f2c90d697058433f292a496d44649dc2feed7fe200>Arial-BoldItalicMT AddT42Char 
3 3150 69 <0002004affe704d005ba0011001f00d740714910012600240b220c211021
1221132014241741125703a800e8010cd021014404990802031011100f11
0210150e031c060310021212110202200100140101000201001c2a060715
270e0b11000a010010192409402a3034af09cf0902af09015f098f09ff09
03000910092009f0090409b8014bb42021012102b80220b2117701b80297
b74f0001008e200017b801b9b14d182b2b10f65de4fde41071f65d717172
2bed2b103c003f3c3fed3fed3f3c87052e2b7d10c40118392f1139390011
123911123987087d10c40ec43130005d01715d0071330121033636333216
15140206062322270713141633323636353426232207064a01320120674f
8951a8ca5f9faf60e46b257e795248835775536c4e6b05bafe163c33e1d7
91feefab53c8af01b16b8668e47471816489>Arial-BoldItalicMT AddT42Char 
3 3744 71 <00020079ffe7055905ba000f001c00d24097251b4f03430c4f144a184a1c
781c073b0a3a183a1b5815501e801ea600aa16c700e700e80ef700f303f9
0a0e2a0a28157712701e041503201e020d0201010e0d1a0b02130502170d
030e01000f0f200e01140e0e0100010a1327050b1a270b070e0f000e1000
520190010120017001800103a001b001020701160120013001500105011e
1024000810082008f0080408e51d011729cd182b2b10f65ded12395d5d71
722fed2b3c003f3c3fed3fed3f3c87052e2b7d10c4011112173900111239
111239870e103cc4313001715d5d005d2121370606232226353400333217
1321011416333236363534262322020427fef0184e975fa5cd0120edd66b
73011ffc3773544e87517c517ea2734b41e1dcff019caa0225fbf672806b
dc65738efee8>Arial-BoldItalicMT AddT42Char 
3 8786 83 <0002fff5fe6b04d8043f0010001e00fb408d4d0d48124616451c66120534
0b470f50206612702098009b0f9b10a800a60fb60fb312c900c70ec710e7
0f108c0f8c1002240a241602080009030f136611d0200502110e0f01021b
010e140c0e11020310010f0f201000141010000100061b2a050714270c0b
0f100f1824af08cf080208402a30348f08ff08025f08af08cf0803000810
082008500870080508b8014bb72020018020012001b80297b20f5200b802
974010001001d010011010201080100310191fb80196b156182b4e10f45d
71724de4fde4105d71f65d71712b72ed003f3c3fed3fed3f3c87052e2b7d
10c40111173900111239111239870ec4c43c313001715d5d5d005d012107
363633321615100706232227032101141633323636353426232206060127
011017579857a7cbaf96cdd36c73fee101df7952478457725852874a0426
6d483ee6e4fee1c6a9abfdd9035a7c8967ef66777f75e300>Arial-BoldItalicMT AddT42Char 
3 9860 86 <0001002dffe7046a043f002c01b2b90023ffe040091e0f3f18201e0f3f25
b8fff8b2093923b8fff8408c0b39102e202e302e402e502e050a0e082936
0b470c7723db0dd525e80d0807230525162313252425460a452307060209
1ad02e03202e3422362545224725402e5d005b0e54155016521757245426
5f2c502e772b862b9a0eaa15a02ba02cb02ecb15cb16c02bc42cf91a1b0e
0d0c0b0a09202122232425260d142a000401171f18010f181f185f186f18
0418b803244012121c2a140710010150016001a001c0010401b8031c400f
12042a2a0b18442f173f174f170317b8025cb50824d0270127b8ffc04027
0b350027102720273027402705278e2e1f441001242f00015f006f000250
00af00cf00ef000400b80222400c4f10010f10d0100220100110b801a4b3
2d4256182b10f65d7172f45d7172ed10ed10f65d2b71edf45ded003ffd43
5c58b90004ffc0b332193f04b8ffc0b32d173f04b8ffc0b328143f04b8ff
c0b223123f002b2b2b2b59e45d71b10602435458b40401140102005d593f
fd435c5840141c4032193f1c402d173f1c4028143f1c4023123f002b2b2b
2b59f45d7139111239111217393130015d7100715d0172002b2b2b2b1325
161633323736353427262724272635343736213216170526272623220615
141716171617161514062322262d0116256e5f623b29151661fefc3e615e
830102cdd21cfef7152f405a5a4f281988d24764fee7e6fb01292c58492c
1e2b1d17162056324e7e7e5b7f96802e3a1d273c27281a10283d3b537597
dea9>Arial-BoldItalicMT AddT42Char 
2 0 0 <0002010000000500050000030007003cb40201b70607b802f54018000504
b703000a0704b7010019080605b70203b009bfde182b10f63cfd3c4e10f4
3c4dfd3c003f3cfd3c10fc3cfd3c3130211121112521112101000400fc20
03c0fc400500fb002004c000>Arial-BoldItalicMT AddT42Char 
Arial-BoldItalicMT /CharStrings get begin
/comma 15 def
/zero 19 def
/one 20 def
/five 24 def
/eight 27 def
/equal 32 def
/B 37 def
/M 48 def
/R 53 def
/S 54 def
/b 69 def
/d 71 def
/p 83 def
/s 86 def
end
Arial-BoldItalicMT /Encoding get
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 53 /five put
dup 56 /eight put
dup 61 /equal put
dup 66 /B put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 98 /b put
dup 100 /d put
dup 112 /p put
dup 115 /s put
pop
end
%ADOEndSubsetFont
/FBTFFA+Arial-BoldItalicMT /Arial-BoldItalicMT findfont ct_VMDictPut
/FBTFFA+Arial-BoldItalicMT*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one 3{/.notdef}rp /five 2{/.notdef}rp 
/eight 4{/.notdef}rp /equal 4{/.notdef}rp /B 10{/.notdef}rp /M 4{/.notdef}rp 
/R /S 14{/.notdef}rp /b /.notdef /d 11{/.notdef}rp /p 
2{/.notdef}rp /s 140{/.notdef}rp]
FBTFFA+Arial-BoldItalicMT nf
FBTFFA+Arial-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
177.766 99.3385 mo
(RSS=5dB,)
[8.66382 8.00391 8.00391 7.008 6.672 7.33191 8.66382 0 ]xsh
238.785 99.3385 mo
(R=108Mbps)
[8.66382 7.008 6.67198 6.672 6.672 9.99591 7.33191 7.33191 0 ]xsh
/FBTFEZ+Arial-BoldItalicMT*1 uf
/FBTFEZ+Arial-BoldItalicMT uf
/XNJBAA+Arial-BoldItalicMT uf
/FBTFEY+DejaVuSans*1 uf
/FBTFEY+DejaVuSans uf
/UUGAAA+DejaVuSans uf
/FBTFFA+Arial-BoldItalicMT*1 uf
/FBTFFA+Arial-BoldItalicMT uf
/Arial-BoldItalicMT uf
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
